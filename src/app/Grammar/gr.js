/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gr = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,13],$V1=[1,14],$V2=[1,30],$V3=[1,29],$V4=[1,36],$V5=[1,31],$V6=[1,27],$V7=[1,28],$V8=[1,20],$V9=[1,21],$Va=[1,22],$Vb=[1,24],$Vc=[1,25],$Vd=[1,23],$Ve=[1,26],$Vf=[1,33],$Vg=[1,34],$Vh=[1,37],$Vi=[1,38],$Vj=[1,39],$Vk=[1,40],$Vl=[1,41],$Vm=[5,16,18,24,26,27,35,37,41,50,53,54,55,56,58,60,61,62,67,69,71,86,87,88,89,90],$Vn=[2,104],$Vo=[1,69],$Vp=[1,68],$Vq=[1,70],$Vr=[1,71],$Vs=[1,72],$Vt=[1,73],$Vu=[1,74],$Vv=[1,75],$Vw=[1,76],$Vx=[1,77],$Vy=[1,78],$Vz=[1,79],$VA=[1,80],$VB=[1,81],$VC=[1,83],$VD=[17,28,34,39,65,66,68,69,70,72,73,74,75,76,77,78,79,80,81,82,83,84],$VE=[5,16,18,24,26,27,35,37,41,50,52,53,54,55,56,58,60,61,62,67,69,71,86,87,88,89,90],$VF=[1,145],$VG=[1,146],$VH=[1,147],$VI=[1,148],$VJ=[1,149],$VK=[1,150],$VL=[1,158],$VM=[1,160],$VN=[28,34],$VO=[17,28,34,39,65,66,68,69,70,72,77,78,79,80,81,82,83,84],$VP=[17,28,34,39,65,66,68,69,70,72,73,74,77,78,79,80,81,82,83,84],$VQ=[17,28,34,39,65,66,68,70,77,78,79,80,81,82,83,84],$VR=[17,28,34,39,65,66,68,70,81,82,83,84],$VS=[17,38],$VT=[5,16,17,18,24,26,27,35,37,41,50,53,54,55,56,58,60,61,62,67,69,71,86,87,88,89,90],$VU=[1,192],$VV=[1,214],$VW=[1,215],$VX=[1,230],$VY=[17,65,66],$VZ=[58,60,61];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"Init":3,"Instructions":4,"EOF":5,"Instruction":6,"IfSt":7,"WhileSt":8,"doWhileSt":9,"ForSt":10,"SwitchSt":11,"Statement":12,"PrintSt":13,"Declaration":14,"Asignation":15,"BREAK":16,";":17,"CONTINUE":18,"ReturnSt":19,"FunctionSt":20,"FunctionArray":21,"TernarioST":22,"Call":23,"RETURN":24,"Expr":25,"ID":26,"(":27,")":28,"ListaExpr":29,".":30,"LENGTH":31,"PUSH":32,"POP":33,",":34,"FUNCTION":35,"Parametros":36,"LET":37,"=":38,":":39,"Tipo":40,"CONST":41,"++":42,"--":43,"NUMBER":44,"STRING":45,"BOOLEAN":46,"ARRAY":47,"VOID":48,"ANY":49,"IF":50,"ElseSt":51,"ELSE":52,"WHILE":53,"DO":54,"SWITCH":55,"{":56,"CaseSt":57,"}":58,"CaseEvalSt":59,"CASE":60,"DEFAULT":61,"FOR":62,"AsignationFor":63,"DeclarationFor":64,"in":65,"for":66,"console.log":67,"?":68,"-":69,"UMENOS":70,"!":71,"+":72,"*":73,"/":74,"%":75,"**":76,"<":77,"<=":78,">":79,">=":80,"==":81,"!=":82,"&&":83,"||":84,"F":85,"DECIMAL":86,"ENTERO":87,"CADENA":88,"TRUE":89,"FALSE":90,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",16:"BREAK",17:";",18:"CONTINUE",24:"RETURN",26:"ID",27:"(",28:")",30:".",31:"LENGTH",32:"PUSH",33:"POP",34:",",35:"FUNCTION",37:"LET",38:"=",39:":",41:"CONST",42:"++",43:"--",44:"NUMBER",45:"STRING",46:"BOOLEAN",47:"ARRAY",48:"VOID",49:"ANY",50:"IF",52:"ELSE",53:"WHILE",54:"DO",55:"SWITCH",56:"{",58:"}",60:"CASE",61:"DEFAULT",62:"FOR",65:"in",66:"for",67:"console.log",68:"?",69:"-",70:"UMENOS",71:"!",72:"+",73:"*",74:"/",75:"%",76:"**",77:"<",78:"<=",79:">",80:">=",81:"==",82:"!=",83:"&&",84:"||",86:"DECIMAL",87:"ENTERO",88:"CADENA",89:"TRUE",90:"FALSE"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[6,1],[6,1],[6,1],[6,1],[6,2],[19,2],[19,3],[19,2],[23,4],[23,5],[21,6],[21,7],[21,6],[29,3],[29,1],[20,5],[20,6],[36,3],[36,1],[14,3],[14,5],[14,7],[14,5],[14,5],[14,7],[15,4],[15,3],[15,3],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[7,6],[51,2],[51,2],[51,0],[8,5],[9,7],[11,7],[57,2],[57,1],[59,4],[59,3],[59,3],[59,2],[10,9],[10,9],[10,7],[10,7],[10,7],[10,7],[64,4],[64,6],[64,4],[64,6],[63,3],[63,2],[63,2],[12,3],[12,2],[13,5],[22,6],[22,8],[22,9],[25,3],[25,2],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,1],[85,3],[85,1],[85,1],[85,1],[85,1],[85,1],[85,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 
        return $$[$0-1]; 
      
break;
case 2:

        $$[$0-1].push($$[$0]);
        this.$ = $$[$0-1];
    
break;
case 3: case 29: case 33:

        this.$ = [$$[$0]];
    
break;
case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 16: case 17: case 18: case 50: case 51: case 97:

        this.$ = $$[$0];
    
break;
case 13:

        this.$ = new Break(_$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 14:

        this.$ = "que ubo";
    
break;
case 15:
 
        
    
break;
case 19: case 21:

         this.$ = $$[$0-1];
    
break;
case 20:

        this.$ = "return";
    
break;
case 22:

         this.$ = $$[$0];
    
break;
case 23:

        this.$ = new Call($$[$0-3], [], _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 24:

        this.$ = new Call($$[$0-4], $$[$0-2], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 25:

        this.$ = new Call($$[$0-5],null,"Length",1, _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 26:

        this.$ = new Call($$[$0-6],$$[$0-2],"push",2, _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 27:

        this.$ = new Call($$[$0-5],null,"pop",3, _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 28: case 32:

        $$[$0-2].push($$[$0]);
        this.$ = $$[$0-2];
    
break;
case 30:

        this.$ = new Function($$[$0-3], $$[$0], [], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 31:

        this.$ = new Function($$[$0-4], $$[$0], $$[$0-2], _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 34:

        this.$ = new Declaration($$[$0-2], null, _$[$0-2].first_line, _$[$0-2].first_column,null);
    
break;
case 35: case 38:

        this.$ = new Declaration($$[$0-4], $$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column,null);
    
break;
case 36: case 39:

        this.$ = new Declaration($$[$0-6], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column,$$[$0-3]);
    
break;
case 37:

        this.$ = new Declaration($$[$0-4], null, _$[$0-4].first_line, _$[$0-4].first_column,$$[$0-1]);
    
break;
case 40:

        this.$ = new Asignation($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column,1);
    
break;
case 41:
 
        this.$ = new Asignation($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column,2);
    
break;
case 42:
 
        this.$ = new Asignation($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column,3);
    
break;
case 43:
 
        this.$ = 0;
    
break;
case 44:
 
        this.$ = 1;
    
break;
case 45:

        this.$ = 2;
    
break;
case 46:

        this.$ = 4;
    
break;
case 47:

        this.$ = 5;
    
break;
case 48:

        this.$ = 6;
    
break;
case 49:

        this.$ = new If($$[$0-3], $$[$0-1], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 52:

        this.$ = null;
    
break;
case 53:

        this.$ = new While($$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 54:

         this.$ = new doWhile($$[$0-2], $$[$0-5], _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 55:

       this.$ = new Switch($$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 56:

        
  
break;
case 57:


  
break;
case 58:

  

break;
case 59: case 60: case 61:

       

break;
case 62:

    this.$ = new For($$[$0-6], $$[$0-4], $$[$0-2], $$[$0], _$[$0-8].first_line, _$[$0-8].first_column);

break;
case 63:

   this.$ = new For($$[$0-6], $$[$0-4], $$[$0-2], $$[$0], _$[$0-8].first_line, _$[$0-8].first_column);

break;
case 64: case 65: case 67:

   this.$ = new For2($$[$0-4], $$[$0-2], $$[$0], _$[$0-6].first_line, _$[$0-6].first_column);

break;
case 66:

   this.$ = new For2($$[$0-4], $$[$0-2], $$[$0],  _$[$0-6].first_line, _$[$0-6].first_column);

break;
case 68: case 70:

        this.$ = new Declaration($$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column,null);
    
break;
case 69: case 71:

        this.$ = new Declaration($$[$0-4], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column,$$[$0-2]);
    
break;
case 72:

        this.$ = new Asignation($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column,1);
    
break;
case 73:
 
        this.$ = new Asignation($$[$0-1], null, _$[$0-1].first_line, _$[$0-1].first_column,2);
    
break;
case 74:
 
        this.$ = new Asignation($$[$0-1], null, _$[$0-1].first_line, _$[$0-1].first_column,3);
    
break;
case 75:

        this.$ = new Statement($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 76:

        this.$ = new Statement(new Array(), _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 77:

        this.$ = new Print($$[$0-2], _$[$0-4].first_line, _$[$0-4].first_column);
        //agregar imprimir 
    
break;
case 78:

        this.$ = new Condition($$[$0-5], $$[$0-3], $$[$0-1],CondOption.TERN ,_$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 79:

        this.$ = new Condition($$[$0-7], $$[$0-3], $$[$0-1],CondOption.TERN ,_$[$0-7].first_line, _$[$0-7].first_column);
    
break;
case 80:

        this.$ = new Condition($$[$0-8], $$[$0-4], $$[$0-2],CondOption.TERN ,_$[$0-8].first_line, _$[$0-8].first_column);
    
break;
case 81:

        this.$ = new Arithmetic($$[$0-2], null, ArithmeticOption.PLUS, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 82:

        this.$ = new Logic($$[$0-1], null, LogicOption.NOT, _$[$0-1].first_line,_$[$0-1].first_column);
    
break;
case 83:

        this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOption.PLUS, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 84:

        this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOption.MINUS, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 85:
 
        this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOption.TIMES, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 86:

        this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOption.DIV, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 87:

        this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOption.MOD, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 88:

        this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOption.POT, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 89:

        this.$ = new Relational($$[$0-2], $$[$0],RelationalOption.LESS, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 90:

        this.$ = new Relational($$[$0-2], $$[$0],RelationalOption.LESSOREQUAL ,_$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 91:

        this.$ = new Relational($$[$0-2], $$[$0],RelationalOption.GREATER ,_$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 92:

        this.$ = new Relational($$[$0-2], $$[$0],RelationalOption.GREATEROREQUAL ,_$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 93:

        this.$ = new Relational($$[$0-2], $$[$0],RelationalOption.EQUAL ,_$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 94:

        this.$ = new Relational($$[$0-2], $$[$0],RelationalOption.NOTEQUAL ,_$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 95:

        this.$ = new Logic($$[$0-2], $$[$0],LogicOption.AND ,_$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 96:

        this.$ = new Logic($$[$0-2], $$[$0],LogicOption.OR ,_$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 98:
 
        this.$ = $$[$0-1];
    
break;
case 99:
 
        this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 0);
    
break;
case 100:
 
        this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 1);
    
break;
case 101:

        this.$ = new Literal($$[$0].replace(/\"/g,""), _$[$0].first_line, _$[$0].first_column, 2);
    
break;
case 102: case 103:

        this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 3);
    
break;
case 104:

        this.$ = new Access($$[$0], _$[$0].first_line, _$[$0].first_column);
    
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V0,18:$V1,19:15,20:16,21:17,22:18,23:19,24:$V2,25:32,26:$V3,27:$V4,35:$V5,37:$V6,41:$V7,50:$V8,53:$V9,54:$Va,55:$Vb,56:$Vc,62:$Vd,67:$Ve,69:$Vf,71:$Vg,85:35,86:$Vh,87:$Vi,88:$Vj,89:$Vk,90:$Vl},{1:[3]},{5:[1,42],6:43,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V0,18:$V1,19:15,20:16,21:17,22:18,23:19,24:$V2,25:32,26:$V3,27:$V4,35:$V5,37:$V6,41:$V7,50:$V8,53:$V9,54:$Va,55:$Vb,56:$Vc,62:$Vd,67:$Ve,69:$Vf,71:$Vg,85:35,86:$Vh,87:$Vi,88:$Vj,89:$Vk,90:$Vl},o($Vm,[2,3]),o($Vm,[2,4]),o($Vm,[2,5]),o($Vm,[2,6]),o($Vm,[2,7]),o($Vm,[2,8]),o($Vm,[2,9]),o($Vm,[2,10]),o($Vm,[2,11]),o($Vm,[2,12]),{17:[1,44]},{17:[1,45]},o($Vm,[2,15]),o($Vm,[2,16]),o($Vm,[2,17]),o($Vm,[2,18]),{17:[1,46]},{27:[1,47]},{27:[1,48]},{12:49,56:$Vc},{27:[1,50]},{27:[1,51]},{4:52,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V0,18:$V1,19:15,20:16,21:17,22:18,23:19,24:$V2,25:32,26:$V3,27:$V4,35:$V5,37:$V6,41:$V7,50:$V8,53:$V9,54:$Va,55:$Vb,56:$Vc,58:[1,53],62:$Vd,67:$Ve,69:$Vf,71:$Vg,85:35,86:$Vh,87:$Vi,88:$Vj,89:$Vk,90:$Vl},{27:[1,54]},{26:[1,55]},{26:[1,56]},o([68,69,72,73,74,75,76,77,78,79,80,81,82,83,84],$Vn,{27:[1,61],30:[1,60],38:[1,57],42:[1,58],43:[1,59]}),{17:[1,62],23:64,25:63,26:[1,65],27:$V4,69:$Vf,71:$Vg,85:35,86:$Vh,87:$Vi,88:$Vj,89:$Vk,90:$Vl},{26:[1,66]},{68:[1,67],69:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,83:$VA,84:$VB},{25:82,26:$VC,27:$V4,69:$Vf,71:$Vg,85:35,86:$Vh,87:$Vi,88:$Vj,89:$Vk,90:$Vl},{25:84,26:$VC,27:$V4,69:$Vf,71:$Vg,85:35,86:$Vh,87:$Vi,88:$Vj,89:$Vk,90:$Vl},o($VD,[2,97]),{25:85,26:$VC,27:$V4,69:$Vf,71:$Vg,85:35,86:$Vh,87:$Vi,88:$Vj,89:$Vk,90:$Vl},o($VD,[2,99]),o($VD,[2,100]),o($VD,[2,101]),o($VD,[2,102]),o($VD,[2,103]),{1:[2,1]},o($Vm,[2,2]),o($Vm,[2,13]),o($Vm,[2,14]),o($Vm,[2,19]),{25:86,26:$VC,27:$V4,69:$Vf,71:$Vg,85:35,86:$Vh,87:$Vi,88:$Vj,89:$Vk,90:$Vl},{25:87,26:$VC,27:$V4,69:$Vf,71:$Vg,85:35,86:$Vh,87:$Vi,88:$Vj,89:$Vk,90:$Vl},{53:[1,88]},{25:89,26:$VC,27:$V4,37:[1,91],41:[1,92],64:90,69:$Vf,71:$Vg,85:35,86:$Vh,87:$Vi,88:$Vj,89:$Vk,90:$Vl},{25:93,26:$VC,27:$V4,69:$Vf,71:$Vg,85:35,86:$Vh,87:$Vi,88:$Vj,89:$Vk,90:$Vl},{6:43,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V0,18:$V1,19:15,20:16,21:17,22:18,23:19,24:$V2,25:32,26:$V3,27:$V4,35:$V5,37:$V6,41:$V7,50:$V8,53:$V9,54:$Va,55:$Vb,56:$Vc,58:[1,94],62:$Vd,67:$Ve,69:$Vf,71:$Vg,85:35,86:$Vh,87:$Vi,88:$Vj,89:$Vk,90:$Vl},o($VE,[2,76]),{25:95,26:$VC,27:$V4,69:$Vf,71:$Vg,85:35,86:$Vh,87:$Vi,88:$Vj,89:$Vk,90:$Vl},{17:[1,96],38:[1,97],39:[1,98]},{38:[1,99],39:[1,100]},{25:101,26:$VC,27:$V4,69:$Vf,71:$Vg,85:35,86:$Vh,87:$Vi,88:$Vj,89:$Vk,90:$Vl},{17:[1,102]},{17:[1,103]},{31:[1,104],32:[1,105],33:[1,106]},{25:109,26:$VC,27:$V4,28:[1,107],29:108,69:$Vf,71:$Vg,85:35,86:$Vh,87:$Vi,88:$Vj,89:$Vk,90:$Vl},o($Vm,[2,20]),{17:[1,110],69:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,83:$VA,84:$VB},o($Vm,[2,22]),o([17,69,72,73,74,75,76,77,78,79,80,81,82,83,84],$Vn,{27:[1,111]}),{27:[1,112]},{25:113,26:$VC,27:$V4,69:$Vf,71:$Vg,85:35,86:$Vh,87:$Vi,88:$Vj,89:$Vk,90:$Vl},{25:114,26:$VC,27:$V4,69:$Vf,71:$Vg,85:35,86:$Vh,87:$Vi,88:$Vj,89:$Vk,90:$Vl},{25:115,26:$VC,27:$V4,69:$Vf,71:$Vg,85:35,86:$Vh,87:$Vi,88:$Vj,89:$Vk,90:$Vl},{25:116,26:$VC,27:$V4,69:$Vf,71:$Vg,85:35,86:$Vh,87:$Vi,88:$Vj,89:$Vk,90:$Vl},{25:117,26:$VC,27:$V4,69:$Vf,71:$Vg,85:35,86:$Vh,87:$Vi,88:$Vj,89:$Vk,90:$Vl},{25:118,26:$VC,27:$V4,69:$Vf,71:$Vg,85:35,86:$Vh,87:$Vi,88:$Vj,89:$Vk,90:$Vl},{25:119,26:$VC,27:$V4,69:$Vf,71:$Vg,85:35,86:$Vh,87:$Vi,88:$Vj,89:$Vk,90:$Vl},{25:120,26:$VC,27:$V4,69:$Vf,71:$Vg,85:35,86:$Vh,87:$Vi,88:$Vj,89:$Vk,90:$Vl},{25:121,26:$VC,27:$V4,69:$Vf,71:$Vg,85:35,86:$Vh,87:$Vi,88:$Vj,89:$Vk,90:$Vl},{25:122,26:$VC,27:$V4,69:$Vf,71:$Vg,85:35,86:$Vh,87:$Vi,88:$Vj,89:$Vk,90:$Vl},{25:123,26:$VC,27:$V4,69:$Vf,71:$Vg,85:35,86:$Vh,87:$Vi,88:$Vj,89:$Vk,90:$Vl},{25:124,26:$VC,27:$V4,69:$Vf,71:$Vg,85:35,86:$Vh,87:$Vi,88:$Vj,89:$Vk,90:$Vl},{25:125,26:$VC,27:$V4,69:$Vf,71:$Vg,85:35,86:$Vh,87:$Vi,88:$Vj,89:$Vk,90:$Vl},{25:126,26:$VC,27:$V4,69:$Vf,71:$Vg,85:35,86:$Vh,87:$Vi,88:$Vj,89:$Vk,90:$Vl},{25:127,26:$VC,27:$V4,69:$Vf,71:$Vg,85:35,86:$Vh,87:$Vi,88:$Vj,89:$Vk,90:$Vl},{69:$Vo,70:[1,128],72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,83:$VA,84:$VB},o($VD,$Vn),o($VD,[2,82]),{28:[1,129],69:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,83:$VA,84:$VB},{28:[1,130],69:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,83:$VA,84:$VB},{28:[1,131],69:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,83:$VA,84:$VB},{27:[1,132]},{17:[1,133],65:[1,134],66:[1,135],69:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,83:$VA,84:$VB},{17:[1,136],65:[1,137],66:[1,138]},{26:[1,139]},{26:[1,140]},{28:[1,141],69:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,83:$VA,84:$VB},o($VE,[2,75]),{28:[1,142],69:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,83:$VA,84:$VB},o($Vm,[2,34]),{25:143,26:$VC,27:$V4,69:$Vf,71:$Vg,85:35,86:$Vh,87:$Vi,88:$Vj,89:$Vk,90:$Vl},{40:144,44:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK},{25:151,26:$VC,27:$V4,69:$Vf,71:$Vg,85:35,86:$Vh,87:$Vi,88:$Vj,89:$Vk,90:$Vl},{40:152,44:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK},{17:[1,153],69:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,83:$VA,84:$VB},o($Vm,[2,41]),o($Vm,[2,42]),{27:[1,154]},{27:[1,155]},{27:[1,156]},{17:$VL,68:[1,157]},{28:[1,159],34:$VM},o($VN,[2,29],{69:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,83:$VA,84:$VB}),o($Vm,[2,21]),{25:109,26:$VC,27:$V4,28:[1,161],29:162,69:$Vf,71:$Vg,85:35,86:$Vh,87:$Vi,88:$Vj,89:$Vk,90:$Vl},{26:[1,165],28:[1,163],36:164},{39:[1,166],69:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,83:$VA,84:$VB},o($VO,[2,83],{73:$Vq,74:$Vr,75:$Vs,76:$Vt}),o($VO,[2,84],{73:$Vq,74:$Vr,75:$Vs,76:$Vt}),o($VP,[2,85],{75:$Vs,76:$Vt}),o($VP,[2,86],{75:$Vs,76:$Vt}),o($VD,[2,87]),o($VD,[2,88]),o($VQ,[2,89],{69:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt}),o($VQ,[2,90],{69:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt}),o($VQ,[2,91],{69:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt}),o($VQ,[2,92],{69:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt}),o($VR,[2,93],{69:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx}),o($VR,[2,94],{69:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx}),o([17,28,34,39,65,66,68,70,83,84],[2,95],{69:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz}),o([17,28,34,39,65,66,68,70,84],[2,96],{69:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,83:$VA}),o($VD,[2,81]),o($VD,[2,98]),{12:167,56:$Vc},{12:168,56:$Vc},{25:169,26:$VC,27:$V4,69:$Vf,71:$Vg,85:35,86:$Vh,87:$Vi,88:$Vj,89:$Vk,90:$Vl},{25:170,26:$VC,27:$V4,69:$Vf,71:$Vg,85:35,86:$Vh,87:$Vi,88:$Vj,89:$Vk,90:$Vl},{25:171,26:$VC,27:$V4,69:$Vf,71:$Vg,85:35,86:$Vh,87:$Vi,88:$Vj,89:$Vk,90:$Vl},{25:172,26:$VC,27:$V4,69:$Vf,71:$Vg,85:35,86:$Vh,87:$Vi,88:$Vj,89:$Vk,90:$Vl},{25:173,26:$VC,27:$V4,69:$Vf,71:$Vg,85:35,86:$Vh,87:$Vi,88:$Vj,89:$Vk,90:$Vl},{25:174,26:$VC,27:$V4,69:$Vf,71:$Vg,85:35,86:$Vh,87:$Vi,88:$Vj,89:$Vk,90:$Vl},{25:175,26:$VC,27:$V4,69:$Vf,71:$Vg,85:35,86:$Vh,87:$Vi,88:$Vj,89:$Vk,90:$Vl},{38:[1,176],39:[1,177]},{38:[1,178],39:[1,179]},{56:[1,180]},{17:[1,181]},{17:[1,182],69:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,83:$VA,84:$VB},{17:[1,184],38:[1,183]},o($VS,[2,43]),o($VS,[2,44]),o($VS,[2,45]),o($VS,[2,46]),o($VS,[2,47]),o($VS,[2,48]),{17:[1,185],69:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,83:$VA,84:$VB},{38:[1,186]},o($Vm,[2,40]),{28:[1,187]},{25:188,26:$VC,27:$V4,69:$Vf,71:$Vg,85:35,86:$Vh,87:$Vi,88:$Vj,89:$Vk,90:$Vl},{28:[1,189]},{25:190,26:$VC,27:$V4,69:$Vf,71:$Vg,85:35,86:$Vh,87:$Vi,88:$Vj,89:$Vk,90:$Vl},o($VT,[2,23]),{17:$VU,68:[1,191]},{25:193,26:$VC,27:$V4,69:$Vf,71:$Vg,85:35,86:$Vh,87:$Vi,88:$Vj,89:$Vk,90:$Vl},{17:$VL},{28:[1,194],34:$VM},{12:195,56:$Vc},{28:[1,196],34:[1,197]},o($VN,[2,33]),{25:198,26:$VC,27:$V4,69:$Vf,71:$Vg,85:35,86:$Vh,87:$Vi,88:$Vj,89:$Vk,90:$Vl},o($Vm,[2,52],{51:199,52:[1,200]}),o($Vm,[2,53]),{28:[1,201],69:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,83:$VA,84:$VB},{17:[1,202],69:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,83:$VA,84:$VB},{28:[1,203],69:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,83:$VA,84:$VB},{28:[1,204],69:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,83:$VA,84:$VB},{17:[1,205],69:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,83:$VA,84:$VB},{28:[1,206],69:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,83:$VA,84:$VB},{28:[1,207],69:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,83:$VA,84:$VB},{25:208,26:$VC,27:$V4,69:$Vf,71:$Vg,85:35,86:$Vh,87:$Vi,88:$Vj,89:$Vk,90:$Vl},{40:209,44:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK},{25:210,26:$VC,27:$V4,69:$Vf,71:$Vg,85:35,86:$Vh,87:$Vi,88:$Vj,89:$Vk,90:$Vl},{40:211,44:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK},{57:212,59:213,60:$VV,61:$VW},o($Vm,[2,77]),o($Vm,[2,35]),{25:216,26:$VC,27:$V4,69:$Vf,71:$Vg,85:35,86:$Vh,87:$Vi,88:$Vj,89:$Vk,90:$Vl},o($Vm,[2,37]),o($Vm,[2,38]),{25:217,26:$VC,27:$V4,69:$Vf,71:$Vg,85:35,86:$Vh,87:$Vi,88:$Vj,89:$Vk,90:$Vl},{17:[1,218]},{28:[1,219],69:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,83:$VA,84:$VB},{17:[1,220]},{39:[1,221],69:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,83:$VA,84:$VB},{25:222,26:$VC,27:$V4,69:$Vf,71:$Vg,85:35,86:$Vh,87:$Vi,88:$Vj,89:$Vk,90:$Vl},o($VT,[2,24]),o($VN,[2,28],{69:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,83:$VA,84:$VB}),{17:$VU},o($Vm,[2,30]),{12:223,56:$Vc},{26:[1,224]},{17:[1,225],69:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,83:$VA,84:$VB},o($Vm,[2,49]),{7:227,12:226,50:$V8,56:$Vc},{17:[1,228]},{26:$VX,63:229},{12:231,56:$Vc},{12:232,56:$Vc},{26:$VX,63:233},{12:234,56:$Vc},{12:235,56:$Vc},o($VY,[2,68],{69:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,83:$VA,84:$VB}),{38:[1,236]},o($VY,[2,70],{69:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,83:$VA,84:$VB}),{38:[1,237]},{58:[1,238],59:239,60:$VV,61:$VW},o($VZ,[2,57]),{25:240,26:$VC,27:$V4,69:$Vf,71:$Vg,85:35,86:$Vh,87:$Vi,88:$Vj,89:$Vk,90:$Vl},{39:[1,241]},{17:[1,242],69:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,83:$VA,84:$VB},{17:[1,243],69:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,83:$VA,84:$VB},o($Vm,[2,25]),{17:[1,244]},o($Vm,[2,27]),{25:245,26:$VC,27:$V4,69:$Vf,71:$Vg,85:35,86:$Vh,87:$Vi,88:$Vj,89:$Vk,90:$Vl},{39:[1,246],69:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,83:$VA,84:$VB},o($Vm,[2,31]),o($VN,[2,32]),o($Vm,[2,78]),o($Vm,[2,50]),o($Vm,[2,51]),o($Vm,[2,54]),{28:[1,247]},{38:[1,248],42:[1,249],43:[1,250]},o($Vm,[2,65]),o($Vm,[2,67]),{28:[1,251]},o($Vm,[2,64]),o($Vm,[2,66]),{25:252,26:$VC,27:$V4,69:$Vf,71:$Vg,85:35,86:$Vh,87:$Vi,88:$Vj,89:$Vk,90:$Vl},{25:253,26:$VC,27:$V4,69:$Vf,71:$Vg,85:35,86:$Vh,87:$Vi,88:$Vj,89:$Vk,90:$Vl},o($Vm,[2,55]),o($VZ,[2,56]),{39:[1,254],69:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,83:$VA,84:$VB},o($VZ,[2,61],{6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,19:15,20:16,21:17,22:18,23:19,25:32,85:35,4:255,16:$V0,18:$V1,24:$V2,26:$V3,27:$V4,35:$V5,37:$V6,41:$V7,50:$V8,53:$V9,54:$Va,55:$Vb,56:$Vc,62:$Vd,67:$Ve,69:$Vf,71:$Vg,86:$Vh,87:$Vi,88:$Vj,89:$Vk,90:$Vl}),o($Vm,[2,36]),o($Vm,[2,39]),o($Vm,[2,26]),{17:[1,256],69:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,83:$VA,84:$VB},{25:257,26:$VC,27:$V4,69:$Vf,71:$Vg,85:35,86:$Vh,87:$Vi,88:$Vj,89:$Vk,90:$Vl},{12:258,56:$Vc},{25:259,26:$VC,27:$V4,69:$Vf,71:$Vg,85:35,86:$Vh,87:$Vi,88:$Vj,89:$Vk,90:$Vl},{28:[2,73]},{28:[2,74]},{12:260,56:$Vc},o($VY,[2,69],{69:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,83:$VA,84:$VB}),o($VY,[2,71],{69:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,83:$VA,84:$VB}),o($VZ,[2,59],{6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,19:15,20:16,21:17,22:18,23:19,25:32,85:35,4:261,16:$V0,18:$V1,24:$V2,26:$V3,27:$V4,35:$V5,37:$V6,41:$V7,50:$V8,53:$V9,54:$Va,55:$Vb,56:$Vc,62:$Vd,67:$Ve,69:$Vf,71:$Vg,86:$Vh,87:$Vi,88:$Vj,89:$Vk,90:$Vl}),o($VZ,[2,60],{7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,19:15,20:16,21:17,22:18,23:19,25:32,85:35,6:43,16:$V0,18:$V1,24:$V2,26:$V3,27:$V4,35:$V5,37:$V6,41:$V7,50:$V8,53:$V9,54:$Va,55:$Vb,56:$Vc,62:$Vd,67:$Ve,69:$Vf,71:$Vg,86:$Vh,87:$Vi,88:$Vj,89:$Vk,90:$Vl}),o($Vm,[2,79]),{17:[1,262],69:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,83:$VA,84:$VB},o($Vm,[2,62]),{28:[2,72],69:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,83:$VA,84:$VB},o($Vm,[2,63]),o($VZ,[2,58],{7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,19:15,20:16,21:17,22:18,23:19,25:32,85:35,6:43,16:$V0,18:$V1,24:$V2,26:$V3,27:$V4,35:$V5,37:$V6,41:$V7,50:$V8,53:$V9,54:$Va,55:$Vb,56:$Vc,62:$Vd,67:$Ve,69:$Vf,71:$Vg,86:$Vh,87:$Vi,88:$Vj,89:$Vk,90:$Vl}),o($Vm,[2,80])],
defaultActions: {42:[2,1],249:[2,73],250:[2,74]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

  const {Arithmetic, ArithmeticOption} = require('../Interprete/Expression/Arithmetic');
  const {Relational, RelationalOption} = require('../Interprete/Expression/Relational');
  const {Access} = require('../Interprete/Expression/Access');
  const {Literal} = require('../Interprete/Expression/Literal');
  const {Declaration} = require('../Interprete/Instruction/Declaration');
  const {Logic} = require('../Interprete/Expression/Logic');
  const {Function} = require('../Interprete/Instruction/Function');
  const {Asignation} = require('../Interprete/Instruction/Asignation');
  const {If} = require('../Interprete/Instruction/If');
  const {While} = require('../Interprete/Instruction/While');
  const {doWhile} = require('../Interprete/Instruction/doWhile');
  const {Statement} = require('../Interprete/Instruction/Statement');
  //const {Switch} = require('../Interprete/Instruction/Switch');
  const {For} = require('../Interprete/Instruction/For');
  const {For2} = require('../Interprete/Instruction/For2');
  const {FunctionArray} = require('../Interprete/Instruction/FunctionArray');
  const {Condition} = require('../Interprete/Expression/Condition');
  const {Print} = require('../Interprete/Instruction/Print');
  const {Continue} = require('../Interprete/Instruction/Continue');
  const {Break} = require('../Interprete/Instruction/Break');

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 87
break;
case 2:return 86
break;
case 3:return 88
break;
case 4:return 88
break;
case 5:return 45
break;
case 6:return 46
break;
case 7:return 44
break;
case 8:return 'TYPE'
break;
case 9:return 47
break;
case 10:return 37
break;
case 11:return 41
break;
case 12:return 89
break;
case 13:return 90
break;
case 14:return 50
break;
case 15:return 52
break;
case 16:return 55
break;
case 17:return 60
break;
case 18:return 61
break;
case 19:return 54
break;
case 20:return 53
break;
case 21:return 62
break;
case 22:return 16
break;
case 23:return 18
break;
case 24:return 24
break;
case 25:return 'PRINT'
break;
case 26:return 'GRAPH'
break;
case 27:return 35
break;
case 28:return 48
break;
case 29:return 32
break;
case 30:return 33
break;
case 31:return 31
break;
case 32:return 'NULL'
break;
case 33:return 49
break;
case 34:return 72
break;
case 35:return 42
break;
case 36:return 69
break;
case 37:return 43
break;
case 38:return 74
break;
case 39:return 73
break;
case 40:return 73
break;
case 41:return 75
break;
case 42:return 68
break;
case 43:return 81
break;
case 44:return 80
break;
case 45:return 82
break;
case 46:return 77
break;
case 47:return 78
break;
case 48:return 79
break;
case 49:return 83
break;
case 50:return 84
break;
case 51:return 71
break;
case 52:return 27
break;
case 53:return 28
break;
case 54:return 56
break;
case 55:return 58
break;
case 56:return 17 
break;
case 57:return 39
break;
case 58:return 38
break;
case 59:return 34
break;
case 60:return 26;
break;
case 61:return 5
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*[/][*][^*]*[*]+([^/\*][^*]*[*]+)*[/]([0-9]+))/,/^(?:(([0-9]+)\.([0-9]+)))/,/^(?:(("[^"]*")))/,/^(?:(('[^']*')))/,/^(?:string\b)/,/^(?:boolean\b)/,/^(?:number\b)/,/^(?:type\b)/,/^(?:Array\b)/,/^(?:let\b)/,/^(?:const\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:do\b)/,/^(?:while\b)/,/^(?:for\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:console\.log\b)/,/^(?:graficar_ts\b)/,/^(?:function\b)/,/^(?:void\b)/,/^(?:Push\b)/,/^(?:Pop\b)/,/^(?:Length\b)/,/^(?:null\b)/,/^(?:any\b)/,/^(?:\+)/,/^(?:\+\+)/,/^(?:-)/,/^(?:--)/,/^(?:\/)/,/^(?:\*)/,/^(?:\*\*)/,/^(?:%)/,/^(?:\?)/,/^(?:==)/,/^(?:>=)/,/^(?:!=)/,/^(?:<)/,/^(?:<=)/,/^(?:>)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:;)/,/^(?::)/,/^(?:=)/,/^(?:,)/,/^(?:([a-zA-Z_])[a-zA-Z0-9_ñÑ]*)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gr;
exports.Parser = gr.Parser;
exports.parse = function () { return gr.parse.apply(gr, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}