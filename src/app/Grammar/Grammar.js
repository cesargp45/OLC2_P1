/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,5],$V1=[1,16],$V2=[1,17],$V3=[1,32],$V4=[1,39],$V5=[1,33],$V6=[1,25],$V7=[1,34],$V8=[1,31],$V9=[1,23],$Va=[1,24],$Vb=[1,50],$Vc=[1,48],$Vd=[1,26],$Ve=[1,27],$Vf=[1,28],$Vg=[1,30],$Vh=[1,29],$Vi=[1,36],$Vj=[1,37],$Vk=[1,41],$Vl=[1,42],$Vm=[1,43],$Vn=[1,44],$Vo=[1,45],$Vp=[1,46],$Vq=[1,47],$Vr=[2,4,8,19,20,26,27,30,31,36,41,42,44,46,55,59,62,63,64,67,69,70,78,80,95,96,97,98,99,100,101],$Vs=[75,78,81,82,83,84,85,86,87,88,89,90,91,92,93],$Vt=[2,138],$Vu=[2,124],$Vv=[2,137],$Vw=[1,67],$Vx=[1,68],$Vy=[1,80],$Vz=[1,83],$VA=[1,85],$VB=[1,84],$VC=[1,86],$VD=[1,87],$VE=[1,88],$VF=[1,89],$VG=[1,90],$VH=[1,91],$VI=[1,92],$VJ=[1,93],$VK=[1,94],$VL=[1,95],$VM=[1,96],$VN=[1,97],$VO=[7,29,35,39,47,73,74,75,78,79,81,82,83,84,85,86,87,88,89,90,91,92,93],$VP=[2,4,8,19,20,26,27,30,31,36,41,42,44,46,55,59,61,62,63,64,67,69,70,78,80,95,96,97,98,99,100,101],$VQ=[1,152],$VR=[29,35,47],$VS=[1,155],$VT=[1,156],$VU=[1,157],$VV=[1,158],$VW=[1,159],$VX=[1,160],$VY=[1,161],$VZ=[1,178],$V_=[1,179],$V$=[1,180],$V01=[7,29,35,39,47,73,74,75,78,79,81,86,87,88,89,90,91,92,93],$V11=[7,29,35,39,47,73,74,75,78,79,81,82,83,86,87,88,89,90,91,92,93],$V21=[7,29,35,39,47,73,74,75,79,86,87,88,89,90,91,92,93],$V31=[7,29,35,39,47,73,74,75,79,90,91,92,93],$V41=[1,196],$V51=[7,29,35,41,43,46,73,74],$V61=[2,107],$V71=[7,29],$V81=[7,73,74],$V91=[1,223],$Va1=[7,29,35,39,46,47,73,74,75,78,79,81,82,83,84,85,86,87,88,89,90,91,92,93],$Vb1=[1,231],$Vc1=[1,253],$Vd1=[1,254],$Ve1=[7,43,46],$Vf1=[1,272],$Vg1=[8,67,69],$Vh1=[29,35];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"EOF":4,"Instructions":5,"Instruction":6,";":7,"}":8,"Declaration":9,"DeclarationArray":10,"Asignation":11,"IfSt":12,"WhileSt":13,"doWhileSt":14,"ForSt":15,"SwitchSt":16,"Statement":17,"PrintSt":18,"BREAK":19,"CONTINUE":20,"ReturnSt":21,"FunctionSt":22,"FunctionArray":23,"Call":24,"TernarioSt":25,"PRINT":26,"(":27,"Expr":28,")":29,"RETURN":30,"ID":31,"ListaExpr":32,"PUSH":33,"POP":34,",":35,"FUNCTION":36,"StatementFunc":37,"Parametros":38,":":39,"Tipo":40,"{":41,"LET":42,"=":43,"CONST":44,"ListaLlaves":45,"[":46,"]":47,"ListaIndices":48,"++":49,"--":50,"ListaValores":51,"NUMBER":52,"STRING":53,"BOOLEAN":54,"NULL":55,"ARRAY":56,"VOID":57,"ANY":58,"IF":59,"ElseSt":60,"ELSE":61,"WHILE":62,"DO":63,"SWITCH":64,"CaseSt":65,"CaseEvalSt":66,"CASE":67,"StatementSw":68,"DEFAULT":69,"FOR":70,"AsignationFor":71,"DeclarationFor":72,"IN":73,"OF":74,"?":75,"ArrayDec":76,"ArrayAcces":77,"-":78,"UMENOS":79,"!":80,"+":81,"*":82,"/":83,"%":84,"**":85,"<":86,"<=":87,">":88,">=":89,"==":90,"!=":91,"&&":92,"||":93,"F":94,"DECIMAL":95,"ENTERO":96,"CADENA":97,"CADENAB":98,"CADENAPARAM":99,"TRUE":100,"FALSE":101,"LENGTH":102,"$accept":0,"$end":1},
terminals_: {2:"error",4:"EOF",7:";",8:"}",19:"BREAK",20:"CONTINUE",26:"PRINT",27:"(",29:")",30:"RETURN",31:"ID",33:"PUSH",34:"POP",35:",",36:"FUNCTION",39:":",41:"{",42:"LET",43:"=",44:"CONST",46:"[",47:"]",49:"++",50:"--",52:"NUMBER",53:"STRING",54:"BOOLEAN",55:"NULL",56:"ARRAY",57:"VOID",58:"ANY",59:"IF",61:"ELSE",62:"WHILE",63:"DO",64:"SWITCH",67:"CASE",69:"DEFAULT",70:"FOR",73:"IN",74:"OF",75:"?",78:"-",79:"UMENOS",80:"!",81:"+",82:"*",83:"/",84:"%",85:"**",86:"<",87:"<=",88:">",89:">=",90:"==",91:"!=",92:"&&",93:"||",95:"DECIMAL",96:"ENTERO",97:"CADENA",98:"CADENAB",99:"CADENAPARAM",100:"TRUE",101:"FALSE",102:"LENGTH"},
productions_: [0,[3,1],[3,2],[5,2],[5,1],[6,2],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[6,1],[6,1],[6,1],[6,2],[6,2],[18,5],[21,2],[21,3],[24,3],[24,4],[23,6],[23,5],[32,3],[32,1],[22,5],[22,6],[22,7],[22,8],[37,3],[37,2],[38,5],[38,3],[9,3],[9,5],[9,7],[9,5],[9,5],[9,7],[9,5],[9,3],[10,6],[10,8],[10,6],[10,8],[45,3],[45,2],[48,4],[48,3],[11,7],[11,4],[11,3],[11,3],[51,3],[51,1],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[12,6],[60,2],[60,2],[60,0],[13,5],[14,7],[16,7],[65,2],[65,1],[66,4],[66,3],[66,3],[66,2],[15,9],[15,9],[15,7],[15,7],[15,7],[15,7],[72,2],[72,4],[72,6],[72,4],[72,4],[72,6],[72,4],[72,2],[71,3],[71,2],[71,2],[17,3],[17,2],[25,5],[68,1],[76,3],[76,2],[77,4],[77,4],[28,3],[28,2],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,1],[28,1],[94,3],[94,1],[94,1],[94,1],[94,1],[94,1],[94,1],[94,1],[94,1],[94,1],[94,2],[94,1],[94,1],[94,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

    
break;
case 2:
 
        return $$[$0-1]; 
     
break;
case 3:

        $$[$0-1].push($$[$0]);
        this.$ = $$[$0-1];
    
break;
case 4: case 32: case 62:

        this.$ = [$$[$0]];
    
break;
case 5: case 6:
  console.error('Error Sintactico: ' + $$[$0-1] + 'linea: ' + _$[$0-1].first_line + ' columna: ' + _$[$0-1].first_column+" se esperaba: " + yy.parser.hash.expected.join(",")); 
break;
case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 20: case 21: case 71: case 72: case 124: case 125: case 138:

        this.$ = $$[$0];
    
break;
case 17:

        this.$ = new Break(_$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 18:

        this.$ = new Continue(_$[$0-1].first_line, _$[$0-1].first_column);;
    
break;
case 19:
 
        this.$ = $$[$0];
    
break;
case 22:

         this.$ = $$[$0-1];
    
break;
case 23: case 37:

        this.$ = $$[$0-1];
    
break;
case 24:

        
        this.$ = new Print($$[$0-2], _$[$0-4].first_line, _$[$0-4].first_column);
        
    
break;
case 25:

        this.$ = new Return(null, _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 26:

         this.$ = new Return($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 27:

        this.$ = new Call($$[$0-2], [], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 28:

        this.$ = new Call($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 29:

        this.$ = new FunctionArray ($$[$0-5],$$[$0-2],"push",1, _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 30:

        this.$ = new FunctionArray ($$[$0-4],null,"pop",2, _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 31: case 61:

        $$[$0-2].push($$[$0]);
        this.$ = $$[$0-2];
    
break;
case 33:

        this.$ = new Function($$[$0-3],null,null, $$[$0], [], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 34:

        this.$ = new Function($$[$0-4], $$[$0-2],null, $$[$0], _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 35:

        this.$ = new Function($$[$0-5],null, $$[$0-1], $$[$0], _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 36:

        this.$ = new Function($$[$0-6],$$[$0-4], $$[$0-1], $$[$0], _$[$0-7].first_line, _$[$0-7].first_column);
    
break;
case 38:

        this.$ = new Array();
    
break;
case 39:

        $$[$0-4].push($$[$0-2],$$[$0]);
        this.$ = $$[$0-4];
    
break;
case 40:

        this.$ = [$$[$0-2],$$[$0]];
    
break;
case 41:

        this.$ = new Declaration($$[$0-1], null, _$[$0-2].first_line, _$[$0-2].first_column,null,2);
    
break;
case 42:

        this.$ = new Declaration($$[$0-3], $$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column,null,2);
    
break;
case 43:

        this.$ = new Declaration($$[$0-5], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column,$$[$0-3],2);
    
break;
case 44:

        this.$ = new Declaration($$[$0-3], null, _$[$0-4].first_line, _$[$0-4].first_column,$$[$0-1],2);
    
break;
case 45:

        this.$ = new Declaration($$[$0-3], $$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column,null,1);
    
break;
case 46:

        this.$ = new Declaration($$[$0-5], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column,$$[$0-3],1);
    
break;
case 47:

        this.$ = new Declaration($$[$0-3], null, _$[$0-4].first_line, _$[$0-4].first_column,$$[$0-1],1);
    
break;
case 48:

        this.$ = new Declaration($$[$0-1], null, _$[$0-2].first_line, _$[$0-2].first_column,null,1);
    
break;
case 49:

        this.$ = new DeclarationArray2($$[$0-4], null, _$[$0-5].first_line, _$[$0-5].first_column,$$[$0-2],2,$$[$0-1]);
        //this.$ = new DeclarationArray($$[$0-4], null, _$[$0-5].first_line, _$[$0-5].first_column,$$[$0-2],2,$$[$0-1]);
    
break;
case 50:

        // this.$ = new DeclarationArray($$[$0-6], $$[$0], _$[$0-7].first_line, _$[$0-7].first_column,$$[$0-4],2,$$[$0-3]);
         this.$ = new DeclarationArray2($$[$0-6], $$[$0-1], _$[$0-7].first_line, _$[$0-7].first_column,$$[$0-4],2,$$[$0-3]);
    
break;
case 51:

        //this.$ = new DeclarationArray($$[$0-4], null, _$[$0-5].first_line, _$[$0-5].first_column,$$[$0-2],1,$$[$0-1]);
        this.$ = new DeclarationArray2($$[$0-4], null, _$[$0-5].first_line, _$[$0-5].first_column,$$[$0-2],1,$$[$0-1]);
    
break;
case 52:

        //this.$ = new DeclarationArray($$[$0-6], $$[$0], _$[$0-7].first_line, _$[$0-7].first_column,$$[$0-4],1,$$[$0-3]);
        this.$ = new DeclarationArray2($$[$0-6], $$[$0-1], _$[$0-7].first_line, _$[$0-7].first_column,$$[$0-4],1,$$[$0-3]);
    
break;
case 53:

        $$[$0-2].push($$[$0-1]);
        this.$ = $$[$0-2];
    
break;
case 54: case 56:

        this.$ = [$$[$0-1]];
    
break;
case 55:

        $$[$0-3].push($$[$0-1]);
        this.$ = $$[$0-3];
    
break;
case 57:
 
        
        this.$ = new AsignationArray($$[$0-6], null,$$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column,3);
    
break;
case 58:
   
        this.$ = new Asignation($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column,1);
        
    
break;
case 59:
 
        
        this.$ = new Asignation($$[$0-2], null, _$[$0-2].first_line, _$[$0-2].first_column,2);
    
break;
case 60:
 
        
        this.$ = new Asignation($$[$0-2], null, _$[$0-2].first_line, _$[$0-2].first_column,3);
    
break;
case 63:
 
        this.$ = 0;
    
break;
case 64:
 
        this.$ = 1;
    
break;
case 65:

        this.$ = 2;
    
break;
case 66:

        this.$ = 3;
    
break;
case 67:

        this.$ = 4;
    
break;
case 68:

        this.$ = 5;
    
break;
case 69:

        this.$ = 6;
    
break;
case 70:

        this.$ = new If($$[$0-3], $$[$0-1], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 73:

        this.$ = null;
    
break;
case 74:

        this.$ = new While($$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 75:

         this.$ = new doWhile($$[$0-2], $$[$0-5], _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 76:

       this.$ = new Switch($$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 77:

     $$[$0-1].push($$[$0]);
     this.$ = $$[$0-1];
  
break;
case 78:

     this.$ = [$$[$0]];
  
break;
case 79:

   this.$ = new Case($$[$0-2],$$[$0], _$[$0-3].first_line, _$[$0-3].first_column,"case");

break;
case 80:

   this.$ = new Case($$[$0-1],null, _$[$0-2].first_line, _$[$0-2].first_column,"case");    

break;
case 81:

   this.$ = new Case(null,$$[$0], _$[$0-2].first_line, _$[$0-2].first_column,"default");    

break;
case 82:

   this.$ = new Case(null,null, _$[$0-1].first_line, _$[$0-1].first_column,"default");    

break;
case 83:

    this.$ = new For($$[$0-6], $$[$0-4], $$[$0-2], $$[$0], _$[$0-8].first_line, _$[$0-8].first_column);

break;
case 84:

   this.$ = new For($$[$0-6], $$[$0-4], $$[$0-2], $$[$0], _$[$0-8].first_line, _$[$0-8].first_column);

break;
case 85:

   this.$ = new For2(null,$$[$0-4], $$[$0-2], $$[$0], _$[$0-6].first_line, _$[$0-6].first_column,1);

break;
case 86:

   this.$ = new For2($$[$0-4],null, $$[$0-2], $$[$0], _$[$0-6].first_line, _$[$0-6].first_column,2);

break;
case 87:

   this.$ = new For2(null,$$[$0-4], $$[$0-2], $$[$0],  _$[$0-6].first_line, _$[$0-6].first_column,3);

break;
case 88:

   this.$ = new For2($$[$0-4],null, $$[$0-2], $$[$0], _$[$0-6].first_line, _$[$0-6].first_column,4);

break;
case 89:

        this.$ = new Declaration($$[$0], null, _$[$0-1].first_line, _$[$0-1].first_column,null,2);
    
break;
case 90:

        this.$ = new Declaration($$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column,null,2);
    
break;
case 91:

        this.$ = new Declaration($$[$0-4], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column,$$[$0-2],2);
    
break;
case 92:

        this.$ = new Declaration($$[$0-2], null, _$[$0-3].first_line, _$[$0-3].first_column,$$[$0],2);
    
break;
case 93:

        this.$ = new Declaration($$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column,null,1);
    
break;
case 94:

        this.$ = new Declaration($$[$0-4], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column,$$[$0-2],1);
    
break;
case 95:

        this.$ = new Declaration($$[$0-2], null, _$[$0-3].first_line, _$[$0-3].first_column,$$[$0],1);
    
break;
case 96:

        this.$ = new Declaration($$[$0], null, _$[$0-1].first_line, _$[$0-1].first_column,null,1);
    
break;
case 97:

        this.$ = new Asignation($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column,1);
    
break;
case 98:
 
        this.$ = new Asignation($$[$0-1], null, _$[$0-1].first_line, _$[$0-1].first_column,2);
    
break;
case 99:
 
        this.$ = new Asignation($$[$0-1], null, _$[$0-1].first_line, _$[$0-1].first_column,3);
    
break;
case 100:

        this.$ = new Statement($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 101:

        this.$ = new Statement(new Array(), _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 102:

        this.$ = new Condition($$[$0-4], $$[$0-2], $$[$0],_$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 103:

        this.$ = new Statement($$[$0], _$[$0].first_line, _$[$0].first_column);
    
break;
case 104:

     this.$ = new DecArray($$[$0-1],_$[$0-2].first_line, _$[$0-2].first_column);
  
break;
case 105:

    this.$ = new DecArray([],_$[$0-1].first_line, _$[$0-1].first_column);
  
break;
case 106:


   this.$ = new AccesoArray('',$$[$0-1],$$[$0-3],_$[$0-3].first_line, _$[$0-3].first_column);

  
break;
case 107:


    this.$ = new AccesoArray($$[$0-3],$$[$0-1],null,_$[$0-3].first_line, _$[$0-3].first_column);
  
break;
case 108:

        this.$ = new Arithmetic($$[$0-1], null, ArithmeticOption.PLUS, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 109:

        this.$ = new Logic($$[$0], null, LogicOption.NOT, _$[$0-1].first_line,_$[$0-1].first_column);
    
break;
case 110:

        this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOption.PLUS, _$[$0-2].first_line,_$[$0-2].first_column);
       
    
break;
case 111:

        this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOption.MINUS, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 112:
 
        this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOption.TIMES, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 113:

        this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOption.DIV, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 114:

        this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOption.MOD, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 115:

        this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOption.POT, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 116:

        this.$ = new Relational($$[$0-2], $$[$0],RelationalOption.LESS, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 117:

        this.$ = new Relational($$[$0-2], $$[$0],RelationalOption.LESSOREQUAL ,_$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 118:

        this.$ = new Relational($$[$0-2], $$[$0],RelationalOption.GREATER ,_$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 119:

        this.$ = new Relational($$[$0-2], $$[$0],RelationalOption.GREATEROREQUAL ,_$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 120:

        this.$ = new Relational($$[$0-2], $$[$0],RelationalOption.EQUAL ,_$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 121:

        this.$ = new Relational($$[$0-2], $$[$0],RelationalOption.NOTEQUAL ,_$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 122:

        this.$ = new Logic($$[$0-2], $$[$0],LogicOption.AND ,_$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 123:

        this.$ = new Logic($$[$0-2], $$[$0],LogicOption.OR ,_$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 126:
 
        this.$ = $$[$0-1];
    
break;
case 127:
 
        //this.$ = new Literal($$[$01], _$[$0].first_line, _$[$0].first_column, 5);
        this.$ = $$[$0];
    
break;
case 128:
 
        this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 0);
    
break;
case 129:
 
        this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 1);
        
    
break;
case 130:

        this.$ = new Literal($$[$0].replace(/\"/g,""), _$[$0].first_line, _$[$0].first_column, 2);
    
break;
case 131:

        this.$ = new Literal($$[$0].replace(/\'/g,""), _$[$0].first_line, _$[$0].first_column, 2);
    
break;
case 132:

        this.$ = new CadenaParam($$[$0].replace(/\`/g,""), _$[$0].first_line, _$[$0].first_column);
    
break;
case 133:

        this.$ = new Literal(true, _$[$0].first_line, _$[$0].first_column, 3);
    
break;
case 134:

        this.$ = new Literal(false, _$[$0].first_line, _$[$0].first_column, 3);
    
break;
case 135:

        this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 4);
    
break;
case 136:

        this.$ = new Access($$[$0-1],null, _$[$0-1].first_line, _$[$0-1].first_column,2);
    
break;
case 137:

        this.$ = new Access($$[$0],null, _$[$0].first_line, _$[$0].first_column,1);
    
break;
case 139:

        this.$ =$$[$0];
    
break;
}
},
table: [{2:$V0,3:1,4:[1,2],5:3,6:4,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:$V1,20:$V2,21:18,22:19,23:20,24:21,25:22,26:$V3,27:$V4,28:35,30:$V5,31:$V6,36:$V7,41:$V8,42:$V9,44:$Va,46:$Vb,55:$Vc,59:$Vd,62:$Ve,63:$Vf,64:$Vg,70:$Vh,76:40,77:49,78:$Vi,80:$Vj,94:38,95:$Vk,96:$Vl,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq},{1:[3]},{1:[2,1]},{2:$V0,4:[1,51],6:52,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:$V1,20:$V2,21:18,22:19,23:20,24:21,25:22,26:$V3,27:$V4,28:35,30:$V5,31:$V6,36:$V7,41:$V8,42:$V9,44:$Va,46:$Vb,55:$Vc,59:$Vd,62:$Ve,63:$Vf,64:$Vg,70:$Vh,76:40,77:49,78:$Vi,80:$Vj,94:38,95:$Vk,96:$Vl,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq},o($Vr,[2,4]),{7:[1,53],8:[1,54]},o($Vr,[2,7]),o($Vr,[2,8]),o($Vr,[2,9]),o($Vr,[2,10]),o($Vr,[2,11]),o($Vr,[2,12]),o($Vr,[2,13]),o($Vr,[2,14]),o($Vr,[2,15]),o($Vr,[2,16]),{7:[1,55]},{7:[1,56]},o($Vr,[2,19]),o($Vr,[2,20]),o($Vr,[2,21]),o($Vs,$Vt,{7:[1,57]}),o($Vs,$Vu,{7:[1,58]}),{31:[1,59]},{31:[1,60]},o($Vs,$Vv,{27:$Vw,33:[1,65],34:[1,66],43:[1,62],46:[1,61],49:[1,63],50:[1,64],102:$Vx}),{27:[1,69]},{27:[1,70]},{17:71,41:$V8},{27:[1,72]},{27:[1,73]},{2:$V0,5:74,6:4,8:[1,75],9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:$V1,20:$V2,21:18,22:19,23:20,24:21,25:22,26:$V3,27:$V4,28:35,30:$V5,31:$V6,36:$V7,41:$V8,42:$V9,44:$Va,46:$Vb,55:$Vc,59:$Vd,62:$Ve,63:$Vf,64:$Vg,70:$Vh,76:40,77:49,78:$Vi,80:$Vj,94:38,95:$Vk,96:$Vl,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq},{27:[1,76]},{7:[1,77],24:81,25:79,27:$V4,28:78,31:$Vy,46:$Vb,55:$Vc,76:40,77:49,78:$Vi,80:$Vj,94:38,95:$Vk,96:$Vl,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq},{31:[1,82]},{75:$Vz,78:$VA,81:$VB,82:$VC,83:$VD,84:$VE,85:$VF,86:$VG,87:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,93:$VN},{24:81,25:79,27:$V4,28:98,31:$Vy,46:$Vb,55:$Vc,76:40,77:49,78:$Vi,80:$Vj,94:38,95:$Vk,96:$Vl,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq},{24:81,25:79,27:$V4,28:99,31:$Vy,46:$Vb,55:$Vc,76:40,77:49,78:$Vi,80:$Vj,94:38,95:$Vk,96:$Vl,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq},o($VO,[2,125]),{24:81,25:79,27:$V4,28:100,31:$Vy,46:$Vb,55:$Vc,76:40,77:49,78:$Vi,80:$Vj,94:38,95:$Vk,96:$Vl,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq},o($VO,[2,127]),o($VO,[2,128]),o($VO,[2,129]),o($VO,[2,130]),o($VO,[2,131]),o($VO,[2,132]),o($VO,[2,133]),o($VO,[2,134]),o($VO,[2,135]),o($VO,[2,139],{46:[1,101]}),{24:81,25:79,27:$V4,28:104,31:$Vy,32:102,46:$Vb,47:[1,103],55:$Vc,76:40,77:49,78:$Vi,80:$Vj,94:38,95:$Vk,96:$Vl,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq},{1:[2,2]},o($Vr,[2,3]),o($Vr,[2,5]),o($Vr,[2,6]),o($Vr,[2,17]),o($Vr,[2,18]),o($Vr,[2,22]),o($Vr,[2,23]),{7:[1,105],39:[1,107],43:[1,106]},{7:[1,110],39:[1,109],43:[1,108]},{24:81,25:79,27:$V4,28:111,31:$Vy,46:$Vb,55:$Vc,76:40,77:49,78:$Vi,80:$Vj,94:38,95:$Vk,96:$Vl,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq},{24:81,25:79,27:$V4,28:112,31:$Vy,46:$Vb,55:$Vc,76:40,77:49,78:$Vi,80:$Vj,94:38,95:$Vk,96:$Vl,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq},{7:[1,113]},{7:[1,114]},{27:[1,115]},{27:[1,116]},{24:81,25:79,27:$V4,28:104,29:[1,117],31:$Vy,32:118,46:$Vb,55:$Vc,76:40,77:49,78:$Vi,80:$Vj,94:38,95:$Vk,96:$Vl,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq},o($VO,[2,136]),{24:81,25:79,27:$V4,28:119,31:$Vy,46:$Vb,55:$Vc,76:40,77:49,78:$Vi,80:$Vj,94:38,95:$Vk,96:$Vl,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq},{24:81,25:79,27:$V4,28:120,31:$Vy,46:$Vb,55:$Vc,76:40,77:49,78:$Vi,80:$Vj,94:38,95:$Vk,96:$Vl,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq},{62:[1,121]},{31:[1,124],42:[1,125],44:[1,126],71:122,72:123},{24:81,25:79,27:$V4,28:127,31:$Vy,46:$Vb,55:$Vc,76:40,77:49,78:$Vi,80:$Vj,94:38,95:$Vk,96:$Vl,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq},{2:$V0,6:52,8:[1,128],9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:$V1,20:$V2,21:18,22:19,23:20,24:21,25:22,26:$V3,27:$V4,28:35,30:$V5,31:$V6,36:$V7,41:$V8,42:$V9,44:$Va,46:$Vb,55:$Vc,59:$Vd,62:$Ve,63:$Vf,64:$Vg,70:$Vh,76:40,77:49,78:$Vi,80:$Vj,94:38,95:$Vk,96:$Vl,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq},o($VP,[2,101]),{24:81,25:79,27:$V4,28:129,31:$Vy,46:$Vb,55:$Vc,76:40,77:49,78:$Vi,80:$Vj,94:38,95:$Vk,96:$Vl,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq},o($Vr,[2,25]),{7:[1,130],75:$Vz,78:$VA,81:$VB,82:$VC,83:$VD,84:$VE,85:$VF,86:$VG,87:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,93:$VN},o($VO,$Vu),o($VO,$Vv,{27:$Vw,46:[1,131],102:$Vx}),o($VO,$Vt),{27:[1,132]},{24:81,25:79,27:$V4,28:133,31:$Vy,46:$Vb,55:$Vc,76:40,77:49,78:$Vi,80:$Vj,94:38,95:$Vk,96:$Vl,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq},{24:81,25:79,27:$V4,28:134,31:$Vy,46:$Vb,55:$Vc,76:40,77:49,78:$Vi,80:$Vj,94:38,95:$Vk,96:$Vl,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq},{24:81,25:79,27:$V4,28:135,31:$Vy,46:$Vb,55:$Vc,76:40,77:49,78:$Vi,80:$Vj,94:38,95:$Vk,96:$Vl,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq},{24:81,25:79,27:$V4,28:136,31:$Vy,46:$Vb,55:$Vc,76:40,77:49,78:$Vi,80:$Vj,94:38,95:$Vk,96:$Vl,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq},{24:81,25:79,27:$V4,28:137,31:$Vy,46:$Vb,55:$Vc,76:40,77:49,78:$Vi,80:$Vj,94:38,95:$Vk,96:$Vl,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq},{24:81,25:79,27:$V4,28:138,31:$Vy,46:$Vb,55:$Vc,76:40,77:49,78:$Vi,80:$Vj,94:38,95:$Vk,96:$Vl,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq},{24:81,25:79,27:$V4,28:139,31:$Vy,46:$Vb,55:$Vc,76:40,77:49,78:$Vi,80:$Vj,94:38,95:$Vk,96:$Vl,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq},{24:81,25:79,27:$V4,28:140,31:$Vy,46:$Vb,55:$Vc,76:40,77:49,78:$Vi,80:$Vj,94:38,95:$Vk,96:$Vl,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq},{24:81,25:79,27:$V4,28:141,31:$Vy,46:$Vb,55:$Vc,76:40,77:49,78:$Vi,80:$Vj,94:38,95:$Vk,96:$Vl,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq},{24:81,25:79,27:$V4,28:142,31:$Vy,46:$Vb,55:$Vc,76:40,77:49,78:$Vi,80:$Vj,94:38,95:$Vk,96:$Vl,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq},{24:81,25:79,27:$V4,28:143,31:$Vy,46:$Vb,55:$Vc,76:40,77:49,78:$Vi,80:$Vj,94:38,95:$Vk,96:$Vl,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq},{24:81,25:79,27:$V4,28:144,31:$Vy,46:$Vb,55:$Vc,76:40,77:49,78:$Vi,80:$Vj,94:38,95:$Vk,96:$Vl,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq},{24:81,25:79,27:$V4,28:145,31:$Vy,46:$Vb,55:$Vc,76:40,77:49,78:$Vi,80:$Vj,94:38,95:$Vk,96:$Vl,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq},{24:81,25:79,27:$V4,28:146,31:$Vy,46:$Vb,55:$Vc,76:40,77:49,78:$Vi,80:$Vj,94:38,95:$Vk,96:$Vl,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq},{24:81,25:79,27:$V4,28:147,31:$Vy,46:$Vb,55:$Vc,76:40,77:49,78:$Vi,80:$Vj,94:38,95:$Vk,96:$Vl,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq},{75:$Vz,78:$VA,79:[1,148],81:$VB,82:$VC,83:$VD,84:$VE,85:$VF,86:$VG,87:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,93:$VN},o($VO,[2,109]),{29:[1,149],75:$Vz,78:$VA,81:$VB,82:$VC,83:$VD,84:$VE,85:$VF,86:$VG,87:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,93:$VN},{24:81,25:79,27:$V4,28:150,31:$Vy,46:$Vb,55:$Vc,76:40,77:49,78:$Vi,80:$Vj,94:38,95:$Vk,96:$Vl,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq},{35:$VQ,47:[1,151]},o($VO,[2,105]),o($VR,[2,32],{75:$Vz,78:$VA,81:$VB,82:$VC,83:$VD,84:$VE,85:$VF,86:$VG,87:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,93:$VN}),o($Vr,[2,41]),{24:81,25:79,27:$V4,28:153,31:$Vy,46:$Vb,55:$Vc,76:40,77:49,78:$Vi,80:$Vj,94:38,95:$Vk,96:$Vl,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq},{40:154,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,57:$VX,58:$VY},{24:81,25:79,27:$V4,28:162,31:$Vy,46:$Vb,55:$Vc,76:40,77:49,78:$Vi,80:$Vj,94:38,95:$Vk,96:$Vl,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq},{40:163,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,57:$VX,58:$VY},o($Vr,[2,48]),{47:[1,164],75:$Vz,78:$VA,81:$VB,82:$VC,83:$VD,84:$VE,85:$VF,86:$VG,87:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,93:$VN},{7:[1,165],75:$Vz,78:$VA,81:$VB,82:$VC,83:$VD,84:$VE,85:$VF,86:$VG,87:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,93:$VN},o($Vr,[2,59]),o($Vr,[2,60]),{24:81,25:79,27:$V4,28:166,31:$Vy,46:$Vb,55:$Vc,76:40,77:49,78:$Vi,80:$Vj,94:38,95:$Vk,96:$Vl,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq},{29:[1,167]},o($VO,[2,27]),{29:[1,168],35:$VQ},{29:[1,169],75:$Vz,78:$VA,81:$VB,82:$VC,83:$VD,84:$VE,85:$VF,86:$VG,87:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,93:$VN},{29:[1,170],75:$Vz,78:$VA,81:$VB,82:$VC,83:$VD,84:$VE,85:$VF,86:$VG,87:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,93:$VN},{27:[1,171]},{7:[1,172]},{7:[1,173],73:[1,174],74:[1,175]},{43:$VZ,49:$V_,50:$V$,73:[1,176],74:[1,177]},{31:[1,181]},{31:[1,182]},{29:[1,183],75:$Vz,78:$VA,81:$VB,82:$VC,83:$VD,84:$VE,85:$VF,86:$VG,87:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,93:$VN},o($VP,[2,100]),{29:[1,184],75:$Vz,78:$VA,81:$VB,82:$VC,83:$VD,84:$VE,85:$VF,86:$VG,87:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,93:$VN},o($Vr,[2,26]),{24:81,25:79,27:$V4,28:185,31:$Vy,46:$Vb,55:$Vc,76:40,77:49,78:$Vi,80:$Vj,94:38,95:$Vk,96:$Vl,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq},{29:[1,186],31:[1,188],38:187},{39:[1,189],75:$Vz,78:$VA,81:$VB,82:$VC,83:$VD,84:$VE,85:$VF,86:$VG,87:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,93:$VN},o($V01,[2,110],{82:$VC,83:$VD,84:$VE,85:$VF}),o($V01,[2,111],{82:$VC,83:$VD,84:$VE,85:$VF}),o($V11,[2,112],{84:$VE,85:$VF}),o($V11,[2,113],{84:$VE,85:$VF}),o($VO,[2,114]),o($VO,[2,115]),o($V21,[2,116],{78:$VA,81:$VB,82:$VC,83:$VD,84:$VE,85:$VF}),o($V21,[2,117],{78:$VA,81:$VB,82:$VC,83:$VD,84:$VE,85:$VF}),o($V21,[2,118],{78:$VA,81:$VB,82:$VC,83:$VD,84:$VE,85:$VF}),o($V21,[2,119],{78:$VA,81:$VB,82:$VC,83:$VD,84:$VE,85:$VF}),o($V31,[2,120],{78:$VA,81:$VB,82:$VC,83:$VD,84:$VE,85:$VF,86:$VG,87:$VH,88:$VI,89:$VJ}),o($V31,[2,121],{78:$VA,81:$VB,82:$VC,83:$VD,84:$VE,85:$VF,86:$VG,87:$VH,88:$VI,89:$VJ}),o([7,29,35,39,47,73,74,75,79,92,93],[2,122],{78:$VA,81:$VB,82:$VC,83:$VD,84:$VE,85:$VF,86:$VG,87:$VH,88:$VI,89:$VJ,90:$VK,91:$VL}),o([7,29,35,39,47,73,74,75,79,93],[2,123],{78:$VA,81:$VB,82:$VC,83:$VD,84:$VE,85:$VF,86:$VG,87:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM}),o($VO,[2,108]),o($VO,[2,126]),{47:[1,190],75:$Vz,78:$VA,81:$VB,82:$VC,83:$VD,84:$VE,85:$VF,86:$VG,87:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,93:$VN},o($VO,[2,104]),{24:81,25:79,27:$V4,28:191,31:$Vy,46:$Vb,55:$Vc,76:40,77:49,78:$Vi,80:$Vj,94:38,95:$Vk,96:$Vl,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq},{7:[1,192],75:$Vz,78:$VA,81:$VB,82:$VC,83:$VD,84:$VE,85:$VF,86:$VG,87:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,93:$VN},{7:[1,194],43:[1,193],45:195,46:$V41},o($V51,[2,63]),o($V51,[2,64]),o($V51,[2,65]),o($V51,[2,66]),o($V51,[2,67]),o($V51,[2,68]),o($V51,[2,69]),{7:[1,197],75:$Vz,78:$VA,81:$VB,82:$VC,83:$VD,84:$VE,85:$VF,86:$VG,87:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,93:$VN},{7:[1,199],43:[1,198],45:200,46:$V41},o([46,75,78,81,82,83,84,85,86,87,88,89,90,91,92,93],$V61,{43:[1,201]}),o($Vr,[2,58]),{29:[1,202],75:$Vz,78:$VA,81:$VB,82:$VC,83:$VD,84:$VE,85:$VF,86:$VG,87:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,93:$VN},{7:[1,203]},o($VO,[2,28]),{17:204,41:$V8},{17:205,41:$V8},{24:81,25:79,27:$V4,28:206,31:$Vy,46:$Vb,55:$Vc,76:40,77:49,78:$Vi,80:$Vj,94:38,95:$Vk,96:$Vl,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq},{24:81,25:79,27:$V4,28:207,31:$Vy,46:$Vb,55:$Vc,76:40,77:49,78:$Vi,80:$Vj,94:38,95:$Vk,96:$Vl,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq},{24:81,25:79,27:$V4,28:208,31:$Vy,46:$Vb,55:$Vc,76:40,77:49,78:$Vi,80:$Vj,94:38,95:$Vk,96:$Vl,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq},{31:[1,209]},{31:[1,210]},{31:[1,211]},{31:[1,212]},{24:81,25:79,27:$V4,28:213,31:$Vy,46:$Vb,55:$Vc,76:40,77:49,78:$Vi,80:$Vj,94:38,95:$Vk,96:$Vl,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq},o($V71,[2,98]),o($V71,[2,99]),o($V81,[2,89],{39:[1,215],43:[1,214]}),o($V81,[2,96],{39:[1,217],43:[1,216]}),{41:[1,218]},{7:[1,219]},{47:[1,220],75:$Vz,78:$VA,81:$VB,82:$VC,83:$VD,84:$VE,85:$VF,86:$VG,87:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,93:$VN},{37:221,39:[1,222],41:$V91},{29:[1,224],35:[1,225]},{39:[1,226]},{24:81,25:79,27:$V4,28:227,31:$Vy,46:$Vb,55:$Vc,76:40,77:49,78:$Vi,80:$Vj,94:38,95:$Vk,96:$Vl,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq},o($Va1,[2,106]),o($VR,[2,31],{75:$Vz,78:$VA,81:$VB,82:$VC,83:$VD,84:$VE,85:$VF,86:$VG,87:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,93:$VN}),o($Vr,[2,42]),{24:81,25:79,27:$V4,28:228,31:$Vy,46:$Vb,55:$Vc,76:40,77:49,78:$Vi,80:$Vj,94:38,95:$Vk,96:$Vl,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq},o($Vr,[2,44]),{7:[1,229],43:[1,230],46:$Vb1},{47:[1,232]},o($Vr,[2,45]),{24:81,25:79,27:$V4,28:233,31:$Vy,46:$Vb,55:$Vc,76:40,77:49,78:$Vi,80:$Vj,94:38,95:$Vk,96:$Vl,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq},o($Vr,[2,47]),{7:[1,234],43:[1,235],46:$Vb1},{24:81,25:79,27:$V4,28:236,31:$Vy,46:$Vb,55:$Vc,76:40,77:49,78:$Vi,80:$Vj,94:38,95:$Vk,96:$Vl,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq},{7:[1,237]},o($Vr,[2,30]),o($Vr,[2,73],{60:238,61:[1,239]}),o($Vr,[2,74]),{29:[1,240],75:$Vz,78:$VA,81:$VB,82:$VC,83:$VD,84:$VE,85:$VF,86:$VG,87:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,93:$VN},{7:[1,241],75:$Vz,78:$VA,81:$VB,82:$VC,83:$VD,84:$VE,85:$VF,86:$VG,87:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,93:$VN},{7:[1,242],75:$Vz,78:$VA,81:$VB,82:$VC,83:$VD,84:$VE,85:$VF,86:$VG,87:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,93:$VN},{29:[1,243]},{29:[1,244]},{29:[1,245]},{29:[1,246]},o($V71,[2,97],{75:$Vz,78:$VA,81:$VB,82:$VC,83:$VD,84:$VE,85:$VF,86:$VG,87:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,93:$VN}),{24:81,25:79,27:$V4,28:247,31:$Vy,46:$Vb,55:$Vc,76:40,77:49,78:$Vi,80:$Vj,94:38,95:$Vk,96:$Vl,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq},{40:248,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,57:$VX,58:$VY},{24:81,25:79,27:$V4,28:249,31:$Vy,46:$Vb,55:$Vc,76:40,77:49,78:$Vi,80:$Vj,94:38,95:$Vk,96:$Vl,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq},{40:250,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,57:$VX,58:$VY},{65:251,66:252,67:$Vc1,69:$Vd1},o($Vr,[2,24]),o($Va1,$V61),o($Vr,[2,33]),{40:255,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,57:$VX,58:$VY},{2:$V0,5:256,6:4,8:[1,257],9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:$V1,20:$V2,21:18,22:19,23:20,24:21,25:22,26:$V3,27:$V4,28:35,30:$V5,31:$V6,36:$V7,41:$V8,42:$V9,44:$Va,46:$Vb,55:$Vc,59:$Vd,62:$Ve,63:$Vf,64:$Vg,70:$Vh,76:40,77:49,78:$Vi,80:$Vj,94:38,95:$Vk,96:$Vl,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq},{37:258,39:[1,259],41:$V91},{31:[1,260]},{40:261,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,57:$VX,58:$VY},o([7,29,35,39,47,73,74,75,79],[2,102],{78:$VA,81:$VB,82:$VC,83:$VD,84:$VE,85:$VF,86:$VG,87:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,93:$VN}),{7:[1,262],75:$Vz,78:$VA,81:$VB,82:$VC,83:$VD,84:$VE,85:$VF,86:$VG,87:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,93:$VN},o($Vr,[2,49]),{24:81,25:79,27:$V4,28:263,31:$Vy,46:$Vb,55:$Vc,76:40,77:49,78:$Vi,80:$Vj,94:38,95:$Vk,96:$Vl,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq},{47:[1,264]},o($Ve1,[2,54]),{7:[1,265],75:$Vz,78:$VA,81:$VB,82:$VC,83:$VD,84:$VE,85:$VF,86:$VG,87:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,93:$VN},o($Vr,[2,51]),{24:81,25:79,27:$V4,28:266,31:$Vy,46:$Vb,55:$Vc,76:40,77:49,78:$Vi,80:$Vj,94:38,95:$Vk,96:$Vl,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq},{7:[1,267],75:$Vz,78:$VA,81:$VB,82:$VC,83:$VD,84:$VE,85:$VF,86:$VG,87:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,93:$VN},o($Vr,[2,29]),o($Vr,[2,70]),{12:269,17:268,41:$V8,59:$Vd},{7:[1,270]},{31:$Vf1,71:271},{31:$Vf1,71:273},{17:274,41:$V8},{17:275,41:$V8},{17:276,41:$V8},{17:277,41:$V8},o($V81,[2,90],{75:$Vz,78:$VA,81:$VB,82:$VC,83:$VD,84:$VE,85:$VF,86:$VG,87:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,93:$VN}),o($V81,[2,92],{43:[1,278]}),o($V81,[2,93],{75:$Vz,78:$VA,81:$VB,82:$VC,83:$VD,84:$VE,85:$VF,86:$VG,87:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,93:$VN}),o($V81,[2,95],{43:[1,279]}),{8:[1,280],66:281,67:$Vc1,69:$Vd1},o($Vg1,[2,78]),{24:81,25:79,27:$V4,28:282,31:$Vy,46:$Vb,55:$Vc,76:40,77:49,78:$Vi,80:$Vj,94:38,95:$Vk,96:$Vl,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq},{39:[1,283]},{37:284,41:$V91},{2:$V0,6:52,8:[1,285],9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:$V1,20:$V2,21:18,22:19,23:20,24:21,25:22,26:$V3,27:$V4,28:35,30:$V5,31:$V6,36:$V7,41:$V8,42:$V9,44:$Va,46:$Vb,55:$Vc,59:$Vd,62:$Ve,63:$Vf,64:$Vg,70:$Vh,76:40,77:49,78:$Vi,80:$Vj,94:38,95:$Vk,96:$Vl,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq},o($Vr,[2,38]),o($Vr,[2,34]),{40:286,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,57:$VX,58:$VY},{39:[1,287]},o($Vh1,[2,40]),o($Vr,[2,43]),{7:[1,288],75:$Vz,78:$VA,81:$VB,82:$VC,83:$VD,84:$VE,85:$VF,86:$VG,87:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,93:$VN},o($Ve1,[2,53]),o($Vr,[2,46]),{7:[1,289],75:$Vz,78:$VA,81:$VB,82:$VC,83:$VD,84:$VE,85:$VF,86:$VG,87:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,93:$VN},o($Vr,[2,57]),o($Vr,[2,71]),o($Vr,[2,72]),o($Vr,[2,75]),{29:[1,290]},{43:$VZ,49:$V_,50:$V$},{29:[1,291]},o($Vr,[2,85]),o($Vr,[2,87]),o($Vr,[2,86]),o($Vr,[2,88]),{24:81,25:79,27:$V4,28:292,31:$Vy,46:$Vb,55:$Vc,76:40,77:49,78:$Vi,80:$Vj,94:38,95:$Vk,96:$Vl,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq},{24:81,25:79,27:$V4,28:293,31:$Vy,46:$Vb,55:$Vc,76:40,77:49,78:$Vi,80:$Vj,94:38,95:$Vk,96:$Vl,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq},o($Vr,[2,76]),o($Vg1,[2,77]),{39:[1,294],75:$Vz,78:$VA,81:$VB,82:$VC,83:$VD,84:$VE,85:$VF,86:$VG,87:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,93:$VN},o($Vg1,[2,82],{6:4,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,21:18,22:19,23:20,24:21,25:22,28:35,94:38,76:40,77:49,68:295,5:296,2:$V0,19:$V1,20:$V2,26:$V3,27:$V4,30:$V5,31:$V6,36:$V7,41:$V8,42:$V9,44:$Va,46:$Vb,55:$Vc,59:$Vd,62:$Ve,63:$Vf,64:$Vg,70:$Vh,78:$Vi,80:$Vj,95:$Vk,96:$Vl,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq}),o($Vr,[2,35]),o($Vr,[2,37]),{37:297,41:$V91},{40:298,52:$VS,53:$VT,54:$VU,55:$VV,56:$VW,57:$VX,58:$VY},o($Vr,[2,50]),o($Vr,[2,52]),{17:299,41:$V8},{17:300,41:$V8},o($V81,[2,91],{75:$Vz,78:$VA,81:$VB,82:$VC,83:$VD,84:$VE,85:$VF,86:$VG,87:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,93:$VN}),o($V81,[2,94],{75:$Vz,78:$VA,81:$VB,82:$VC,83:$VD,84:$VE,85:$VF,86:$VG,87:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,93:$VN}),o($Vg1,[2,80],{6:4,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,21:18,22:19,23:20,24:21,25:22,28:35,94:38,76:40,77:49,5:296,68:301,2:$V0,19:$V1,20:$V2,26:$V3,27:$V4,30:$V5,31:$V6,36:$V7,41:$V8,42:$V9,44:$Va,46:$Vb,55:$Vc,59:$Vd,62:$Ve,63:$Vf,64:$Vg,70:$Vh,78:$Vi,80:$Vj,95:$Vk,96:$Vl,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq}),o($Vg1,[2,81]),o($Vg1,[2,103],{9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,21:18,22:19,23:20,24:21,25:22,28:35,94:38,76:40,77:49,6:52,2:$V0,19:$V1,20:$V2,26:$V3,27:$V4,30:$V5,31:$V6,36:$V7,41:$V8,42:$V9,44:$Va,46:$Vb,55:$Vc,59:$Vd,62:$Ve,63:$Vf,64:$Vg,70:$Vh,78:$Vi,80:$Vj,95:$Vk,96:$Vl,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq}),o($Vr,[2,36]),o($Vh1,[2,39]),o($Vr,[2,83]),o($Vr,[2,84]),o($Vg1,[2,79])],
defaultActions: {2:[2,1],51:[2,2]},
parseError: function parseError (str, hash) {
    this.hash = hash;
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

  const {Arithmetic, ArithmeticOption} = require('../Interprete/Expression/Arithmetic');
  const {Relational, RelationalOption} = require('../Interprete/Expression/Relational');
  const {Access} = require('../Interprete/Expression/Access');
  const {Literal} = require('../Interprete/Expression/Literal');
  const {AccesoArray} = require('../Interprete/Expression/AccesoArray');
  const {Declaration} = require('../Interprete/Instruction/Declaration');
  const {DeclarationArray} = require('../Interprete/Instruction/DeclarationArray');
   const {DeclarationArray2} = require('../Interprete/Instruction/DeclarationArray2');
   const {DecArray} = require('../Interprete/Instruction/DecArray');
  const {Logic,LogicOption} = require('../Interprete/Expression/Logic');
  const {Function} = require('../Interprete/Instruction/Function');
  const {Asignation} = require('../Interprete/Instruction/Asignation');
   const {AsignationArray} = require('../Interprete/Instruction/AsignationArray');
  const {If} = require('../Interprete/Instruction/If');
  const {While} = require('../Interprete/Instruction/While');
  const {doWhile} = require('../Interprete/Instruction/doWhile');
  const {Statement} = require('../Interprete/Instruction/Statement');
  const {Switch} = require('../Interprete/Instruction/Switch');
  const {Case} = require('../Interprete/Instruction/Case');
  const {For} = require('../Interprete/Instruction/For');
  const {For2} = require('../Interprete/Instruction/For2');
  const {FunctionArray} = require('../Interprete/Instruction/FunctionArray');
  const {Condition} = require('../Interprete/Expression/Condition');
  const {Print} = require('../Interprete/Instruction/Print');
  const {Continue} = require('../Interprete/Instruction/Continue');
  const {Break} = require('../Interprete/Instruction/Break');
  const {Call} = require('../Interprete/Instruction/Call');
  const {Return} = require('../Interprete/Instruction/Return');
  const {Prueba} = require('../Interprete/Instruction/Prueba');
  const {CadenaParam} = require('../Interprete/Instruction/CadenaParam');
	 
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// se ignoran espacios en blanco
break;
case 1:// comentario simple línea
break;
case 2:// comentario multilinea 
break;
case 3:return 96
break;
case 4:return 95
break;
case 5:return 97
break;
case 6:return 98
break;
case 7:return 99
break;
case 8:return 53
break;
case 9:return 54
break;
case 10:return 52
break;
case 11:return 'TYPE'
break;
case 12:return 56
break;
case 13:return 42
break;
case 14:return 44
break;
case 15:return 100
break;
case 16:return 101
break;
case 17:return 59
break;
case 18:return 61
break;
case 19:return 64
break;
case 20:return 67
break;
case 21:return 69
break;
case 22:return 63
break;
case 23:return 62
break;
case 24:return 70
break;
case 25:return 19
break;
case 26:return 20
break;
case 27:return 30
break;
case 28:return 26
break;
case 29:return 'GRAPH'
break;
case 30:return 36
break;
case 31:return 57
break;
case 32:return 33
break;
case 33:return 34
break;
case 34:return 102
break;
case 35:return 55
break;
case 36:return 58
break;
case 37:return 73
break;
case 38:return 74
break;
case 39:return 49
break;
case 40:return 81
break;
case 41:return 50
break;
case 42:return 78
break;
case 43:return 83
break;
case 44:return 85
break;
case 45:return 82
break;
case 46:return 84
break;
case 47:return 75
break;
case 48:return 90
break;
case 49:return 89
break;
case 50:return 87
break;
case 51:return 91
break;
case 52:return 86
break;
case 53:return 88
break;
case 54:return 92
break;
case 55:return 93
break;
case 56:return 80
break;
case 57:return 27
break;
case 58:return 29
break;
case 59:return 41
break;
case 60:return 8
break;
case 61:return 46
break;
case 62:return 47
break;
case 63:return 7 
break;
case 64:return 39
break;
case 65:return 43
break;
case 66:return 35
break;
case 67:return 31;
break;
case 68:return 4
break;
case 69: console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:([0-9]+))/,/^(?:(([0-9]+)(\.([0-9]+))?))/,/^(?:(("[^"]*")))/,/^(?:(('[^']*')))/,/^(?:((`[^`]*`)))/,/^(?:string\b)/,/^(?:boolean\b)/,/^(?:number\b)/,/^(?:type\b)/,/^(?:Array\b)/,/^(?:let\b)/,/^(?:const\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:do\b)/,/^(?:while\b)/,/^(?:for\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:console\.log\b)/,/^(?:graficar_ts\b)/,/^(?:function\b)/,/^(?:void\b)/,/^(?:\.push\b)/,/^(?:\.pop\b)/,/^(?:\.length\b)/,/^(?:null\b)/,/^(?:any\b)/,/^(?:in\b)/,/^(?:of\b)/,/^(?:\+\+)/,/^(?:\+)/,/^(?:--)/,/^(?:-)/,/^(?:\/)/,/^(?:\*\*)/,/^(?:\*)/,/^(?:%)/,/^(?:\?)/,/^(?:==)/,/^(?:>=)/,/^(?:<=)/,/^(?:!=)/,/^(?:<)/,/^(?:>)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:;)/,/^(?::)/,/^(?:=)/,/^(?:,)/,/^(?:([a-zA-Z_])[a-zA-Z0-9_ñÑ]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Grammar;
exports.Parser = Grammar.Parser;
exports.parse = function () { return Grammar.parse.apply(Grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}