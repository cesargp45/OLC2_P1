/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,5],$V1=[1,16],$V2=[1,17],$V3=[1,23],$V4=[1,34],$V5=[1,41],$V6=[1,35],$V7=[1,27],$V8=[1,36],$V9=[1,33],$Va=[1,50],$Vb=[1,24],$Vc=[1,25],$Vd=[1,51],$Ve=[1,28],$Vf=[1,29],$Vg=[1,30],$Vh=[1,32],$Vi=[1,31],$Vj=[1,38],$Vk=[1,39],$Vl=[1,43],$Vm=[1,44],$Vn=[1,45],$Vo=[1,46],$Vp=[1,47],$Vq=[1,48],$Vr=[1,49],$Vs=[2,4,8,19,20,26,27,28,31,32,37,42,46,51,54,55,62,65,66,67,70,72,73,80,81,96,97,98,99,100,101,102],$Vt=[78,80,82,83,84,85,86,87,88,89,90,91,92,93,94],$Vu=[2,149],$Vv=[2,135],$Vw=[2,151],$Vx=[1,64],$Vy=[1,65],$Vz=[2,148],$VA=[1,71],$VB=[1,72],$VC=[1,73],$VD=[1,85],$VE=[1,89],$VF=[1,91],$VG=[1,90],$VH=[1,92],$VI=[1,93],$VJ=[1,94],$VK=[1,95],$VL=[1,96],$VM=[1,97],$VN=[1,98],$VO=[1,99],$VP=[1,100],$VQ=[1,101],$VR=[1,102],$VS=[1,103],$VT=[7,30,36,40,56,76,77,78,80,82,83,84,85,86,87,88,89,90,91,92,93,94],$VU=[2,4,8,19,20,26,27,28,31,32,37,42,46,51,54,55,62,64,65,66,67,70,72,73,80,81,96,97,98,99,100,101,102],$VV=[1,156],$VW=[30,36,56],$VX=[1,159],$VY=[1,160],$VZ=[1,161],$V_=[1,162],$V$=[1,163],$V01=[1,164],$V11=[1,165],$V21=[1,184],$V31=[1,185],$V41=[1,186],$V51=[7,30,36,40,56,76,77,78,80,82,87,88,89,90,91,92,93,94],$V61=[7,30,36,40,56,76,77,78,80,82,83,84,87,88,89,90,91,92,93,94],$V71=[7,30,36,40,56,76,77,78,87,88,89,90,91,92,93,94],$V81=[7,30,36,40,56,76,77,78,91,92,93,94],$V91=[1,200],$Va1=[7,52,55,76,77],$Vb1=[7,30,36,40,52,55,56,76,77,78,80,82,83,84,85,86,87,88,89,90,91,92,93,94,103],$Vc1=[7,30],$Vd1=[7,76,77],$Ve1=[1,225],$Vf1=[1,233],$Vg1=[1,254],$Vh1=[1,255],$Vi1=[1,257],$Vj1=[1,258],$Vk1=[1,259],$Vl1=[1,260],$Vm1=[1,261],$Vn1=[1,262],$Vo1=[1,263],$Vp1=[7,30,36,42,52,55],$Vq1=[1,279],$Vr1=[8,70,72],$Vs1=[30,36,42],$Vt1=[30,36];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"EOF":4,"Instructions":5,"Instruction":6,";":7,"}":8,"Declaration":9,"DeclarationArray":10,"Asignation":11,"IfSt":12,"WhileSt":13,"doWhileSt":14,"ForSt":15,"SwitchSt":16,"Statement":17,"PrintSt":18,"BREAK":19,"CONTINUE":20,"ReturnSt":21,"FunctionSt":22,"FunctionArray":23,"Call":24,"TernarioSt":25,"GRAPH":26,"PRINT":27,"(":28,"Expr":29,")":30,"RETURN":31,"ID":32,"ListaExpr":33,"PUSH":34,"POP":35,",":36,"FUNCTION":37,"StatementFunc":38,"Parametros":39,":":40,"TipoParam":41,"{":42,"NUMBER":43,"STRING":44,"BOOLEAN":45,"NULL":46,"ARRAY":47,"VOID":48,"ANY":49,"ListaLlaves":50,"LET":51,"=":52,"Tipo":53,"CONST":54,"[":55,"]":56,"ListaIndices":57,"ArrayAcces":58,"++":59,"--":60,"ListaValores":61,"IF":62,"ElseSt":63,"ELSE":64,"WHILE":65,"DO":66,"SWITCH":67,"CaseSt":68,"CaseEvalSt":69,"CASE":70,"StatementSw":71,"DEFAULT":72,"FOR":73,"AsignationFor":74,"DeclarationFor":75,"IN":76,"OF":77,"?":78,"ArrayDec":79,"-":80,"!":81,"+":82,"*":83,"/":84,"%":85,"**":86,"<":87,"<=":88,">":89,">=":90,"==":91,"!=":92,"&&":93,"||":94,"F":95,"DECIMAL":96,"ENTERO":97,"CADENA":98,"CADENAB":99,"CADENAPARAM":100,"TRUE":101,"FALSE":102,"LENGTH":103,"$accept":0,"$end":1},
terminals_: {2:"error",4:"EOF",7:";",8:"}",19:"BREAK",20:"CONTINUE",26:"GRAPH",27:"PRINT",28:"(",30:")",31:"RETURN",32:"ID",34:"PUSH",35:"POP",36:",",37:"FUNCTION",40:":",42:"{",43:"NUMBER",44:"STRING",45:"BOOLEAN",46:"NULL",47:"ARRAY",48:"VOID",49:"ANY",51:"LET",52:"=",54:"CONST",55:"[",56:"]",59:"++",60:"--",62:"IF",64:"ELSE",65:"WHILE",66:"DO",67:"SWITCH",70:"CASE",72:"DEFAULT",73:"FOR",76:"IN",77:"OF",78:"?",80:"-",81:"!",82:"+",83:"*",84:"/",85:"%",86:"**",87:"<",88:"<=",89:">",90:">=",91:"==",92:"!=",93:"&&",94:"||",96:"DECIMAL",97:"ENTERO",98:"CADENA",99:"CADENAB",100:"CADENAPARAM",101:"TRUE",102:"FALSE",103:"LENGTH"},
productions_: [0,[3,1],[3,2],[5,2],[5,1],[6,2],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[6,1],[6,1],[6,1],[6,2],[6,2],[6,2],[18,5],[21,2],[21,3],[24,3],[24,4],[23,6],[23,5],[33,3],[33,1],[22,5],[22,6],[22,7],[22,8],[38,3],[38,2],[39,5],[39,3],[41,1],[41,1],[41,1],[41,1],[41,1],[41,1],[41,1],[41,2],[41,2],[41,2],[9,3],[9,5],[9,7],[9,5],[9,5],[9,7],[9,5],[9,3],[10,6],[10,8],[10,6],[10,8],[50,3],[50,2],[57,4],[57,3],[11,4],[11,4],[11,3],[11,3],[61,3],[61,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[12,6],[63,2],[63,2],[63,0],[13,5],[14,7],[16,7],[68,2],[68,1],[69,4],[69,3],[69,3],[69,2],[15,9],[15,9],[15,7],[15,7],[15,7],[15,7],[75,2],[75,4],[75,6],[75,4],[75,4],[75,6],[75,4],[75,2],[74,3],[74,2],[74,2],[17,3],[17,2],[25,5],[71,1],[79,3],[79,2],[58,4],[58,4],[29,2],[29,2],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,1],[29,1],[95,3],[95,1],[95,1],[95,1],[95,1],[95,1],[95,1],[95,1],[95,1],[95,1],[95,2],[95,1],[95,1],[95,2],[95,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

    
break;
case 2:
 
        return $$[$0-1]; 
     
break;
case 3:

        $$[$0-1].push($$[$0]);
        this.$ = $$[$0-1];
    
break;
case 4: case 33: case 73:

        this.$ = [$$[$0]];
    
break;
case 5: case 6:
  console.error('Error Sintactico: ' + $$[$0-1] + ' linea: ' + _$[$0-1].first_line + ' columna: ' + _$[$0-1].first_column+" se esperaba: " + yy.parser.hash.expected.join(",")); 
                  let e = new registrarError(_$[$0-1].first_line, _$[$0-1].first_column,$$[$0-1],yy.parser.hash.expected.join(","),2);
                  e.execute();
    
break;
case 7: case 8: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 20: case 21: case 82: case 83: case 135: case 136: case 149:

        this.$ = $$[$0];
    
break;
case 9:

         //console.log("entra a asignar");
        this.$ = $$[$0];
    
break;
case 17:

        this.$ = new Break(_$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 18:

        this.$ = new Continue(_$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 19:
 
        this.$ = $$[$0];
    
break;
case 22:

         this.$ = $$[$0-1];
    
break;
case 23: case 38:

        this.$ = $$[$0-1];
    
break;
case 24:

         this.$ = new Graficar(_$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 25:

        
        this.$ = new Print($$[$0-2], _$[$0-4].first_line, _$[$0-4].first_column);
        
    
break;
case 26:

        this.$ = new Return(null, _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 27:

         this.$ = new Return($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 28:

        this.$ = new Call($$[$0-2], [], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 29:

        this.$ = new Call($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 30:

        this.$ = new FunctionArray ($$[$0-5],$$[$0-2],"push",1, _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 31:

        this.$ = new FunctionArray ($$[$0-4],null,"pop",2, _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 32: case 72:

        $$[$0-2].push($$[$0]);
        this.$ = $$[$0-2];
    
break;
case 34:

        this.$ = new Function($$[$0-3],null,null, $$[$0], [], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 35:

        this.$ = new Function($$[$0-4], $$[$0-2],null, $$[$0], _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 36:

        this.$ = new Function($$[$0-5],null, $$[$0-1], $$[$0], _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 37:

        this.$ = new Function($$[$0-6],$$[$0-4], $$[$0-1], $$[$0], _$[$0-7].first_line, _$[$0-7].first_column);
    
break;
case 39:

        this.$ = new Array();
    
break;
case 40:

        $$[$0-4].push($$[$0-2],$$[$0]);
        this.$ = $$[$0-4];
    
break;
case 41:

        this.$ = [$$[$0-2],$$[$0]];
    
break;
case 42: case 74:
 
        this.$ = 0;
    
break;
case 43: case 75:
 
        this.$ = 1;
    
break;
case 44: case 76:

        this.$ = 2;
    
break;
case 45: case 77:

        this.$ = 3;
    
break;
case 46: case 78:

        this.$ = 4;
    
break;
case 47: case 79:

        this.$ = 5;
    
break;
case 48: case 80:

        this.$ = 6;
    
break;
case 49:

        this.$ = 7;
    
break;
case 50:

        this.$ = 8;
    
break;
case 51:

        this.$ = 9;
    
break;
case 52:

        this.$ = new Declaration($$[$0-1], null, _$[$0-2].first_line, _$[$0-2].first_column,null,2);
    
break;
case 53:

        this.$ = new Declaration($$[$0-3], $$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column,null,2);
    
break;
case 54:

        this.$ = new Declaration($$[$0-5], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column,$$[$0-3],2);
    
break;
case 55:

        this.$ = new Declaration($$[$0-3], null, _$[$0-4].first_line, _$[$0-4].first_column,$$[$0-1],2);
    
break;
case 56:

        this.$ = new Declaration($$[$0-3], $$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column,null,1);
    
break;
case 57:

        this.$ = new Declaration($$[$0-5], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column,$$[$0-3],1);
    
break;
case 58:

        this.$ = new Declaration($$[$0-3], null, _$[$0-4].first_line, _$[$0-4].first_column,$$[$0-1],1);
    
break;
case 59:

        this.$ = new Declaration($$[$0-1], null, _$[$0-2].first_line, _$[$0-2].first_column,null,1);
    
break;
case 60:

        this.$ = new DeclarationArray2($$[$0-4], null, _$[$0-5].first_line, _$[$0-5].first_column,$$[$0-2],2,$$[$0-1]);
        //this.$ = new DeclarationArray($$[$0-4], null, _$[$0-5].first_line, _$[$0-5].first_column,$$[$0-2],2,$$[$0-1]);
    
break;
case 61:

        // this.$ = new DeclarationArray($$[$0-6], $$[$0], _$[$0-7].first_line, _$[$0-7].first_column,$$[$0-4],2,$$[$0-3]);
         this.$ = new DeclarationArray2($$[$0-6], $$[$0-1], _$[$0-7].first_line, _$[$0-7].first_column,$$[$0-4],2,$$[$0-3]);
    
break;
case 62:

        //this.$ = new DeclarationArray($$[$0-4], null, _$[$0-5].first_line, _$[$0-5].first_column,$$[$0-2],1,$$[$0-1]);
        this.$ = new DeclarationArray2($$[$0-4], null, _$[$0-5].first_line, _$[$0-5].first_column,$$[$0-2],1,$$[$0-1]);
    
break;
case 63:

        //this.$ = new DeclarationArray($$[$0-6], $$[$0], _$[$0-7].first_line, _$[$0-7].first_column,$$[$0-4],1,$$[$0-3]);
        this.$ = new DeclarationArray2($$[$0-6], $$[$0-1], _$[$0-7].first_line, _$[$0-7].first_column,$$[$0-4],1,$$[$0-3]);
    
break;
case 64:

        $$[$0-2].push($$[$0-1]);
        this.$ = $$[$0-2];
    
break;
case 65: case 67:

        this.$ = [$$[$0-1]];
    
break;
case 66:

        $$[$0-3].push($$[$0-1]);
        this.$ = $$[$0-3];
    
break;
case 68:
            
        
        
         this.$ = new pruebaAsign($$[$0-3],$$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 69:
   
        this.$ = new Asignation($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column,1);
        
    
break;
case 70:
 
        
        this.$ = new Asignation($$[$0-2], null, _$[$0-2].first_line, _$[$0-2].first_column,2);
    
break;
case 71:
 
        
        this.$ = new Asignation($$[$0-2], null, _$[$0-2].first_line, _$[$0-2].first_column,3);
    
break;
case 81:

        this.$ = new If($$[$0-3], $$[$0-1], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 84:

        this.$ = null;
    
break;
case 85:

        this.$ = new While($$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 86:

         this.$ = new doWhile($$[$0-2], $$[$0-5], _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 87:

       this.$ = new Switch($$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 88:

     $$[$0-1].push($$[$0]);
     this.$ = $$[$0-1];
  
break;
case 89:

     this.$ = [$$[$0]];
  
break;
case 90:

   this.$ = new Case($$[$0-2],$$[$0], _$[$0-3].first_line, _$[$0-3].first_column,"case");

break;
case 91:

   this.$ = new Case($$[$0-1],null, _$[$0-2].first_line, _$[$0-2].first_column,"case");    

break;
case 92:

   this.$ = new Case(null,$$[$0], _$[$0-2].first_line, _$[$0-2].first_column,"default");    

break;
case 93:

   this.$ = new Case(null,null, _$[$0-1].first_line, _$[$0-1].first_column,"default");    

break;
case 94:

    this.$ = new For($$[$0-6], $$[$0-4], $$[$0-2], $$[$0], _$[$0-8].first_line, _$[$0-8].first_column);

break;
case 95:

   this.$ = new For($$[$0-6], $$[$0-4], $$[$0-2], $$[$0], _$[$0-8].first_line, _$[$0-8].first_column);

break;
case 96:

   this.$ = new For2(null,$$[$0-4], $$[$0-2], $$[$0], _$[$0-6].first_line, _$[$0-6].first_column,1);

break;
case 97:

   this.$ = new For2($$[$0-4],null, $$[$0-2], $$[$0], _$[$0-6].first_line, _$[$0-6].first_column,2);

break;
case 98:

   this.$ = new For2(null,$$[$0-4], $$[$0-2], $$[$0],  _$[$0-6].first_line, _$[$0-6].first_column,3);

break;
case 99:

   this.$ = new For2($$[$0-4],null, $$[$0-2], $$[$0], _$[$0-6].first_line, _$[$0-6].first_column,4);

break;
case 100:

        this.$ = new Declaration($$[$0], null, _$[$0-1].first_line, _$[$0-1].first_column,null,2);
    
break;
case 101:

        this.$ = new Declaration($$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column,null,2);
    
break;
case 102:

        this.$ = new Declaration($$[$0-4], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column,$$[$0-2],2);
    
break;
case 103:

        this.$ = new Declaration($$[$0-2], null, _$[$0-3].first_line, _$[$0-3].first_column,$$[$0],2);
    
break;
case 104:

        this.$ = new Declaration($$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column,null,1);
    
break;
case 105:

        this.$ = new Declaration($$[$0-4], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column,$$[$0-2],1);
    
break;
case 106:

        this.$ = new Declaration($$[$0-2], null, _$[$0-3].first_line, _$[$0-3].first_column,$$[$0],1);
    
break;
case 107:

        this.$ = new Declaration($$[$0], null, _$[$0-1].first_line, _$[$0-1].first_column,null,1);
    
break;
case 108:

        this.$ = new Asignation($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column,1);
    
break;
case 109:
 
        this.$ = new Asignation($$[$0-1], null, _$[$0-1].first_line, _$[$0-1].first_column,2);
    
break;
case 110:
 
        this.$ = new Asignation($$[$0-1], null, _$[$0-1].first_line, _$[$0-1].first_column,3);
    
break;
case 111:

        this.$ = new Statement($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 112:

        this.$ = new Statement(new Array(), _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 113:

        this.$ = new Condition($$[$0-4], $$[$0-2], $$[$0],_$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 114:

        this.$ = new Statement($$[$0], _$[$0].first_line, _$[$0].first_column);
    
break;
case 115:

     this.$ = new DecArray($$[$0-1],_$[$0-2].first_line, _$[$0-2].first_column);
  
break;
case 116:

    this.$ = new DecArray([],_$[$0-1].first_line, _$[$0-1].first_column);
  
break;
case 117:


   this.$ = new AccesoArray('',$$[$0-1],$$[$0-3],_$[$0-3].first_line, _$[$0-3].first_column,null,null);

  
break;
case 118:


    this.$ = new AccesoArray($$[$0-3],$$[$0-1],null,_$[$0-3].first_line, _$[$0-3].first_column,null,null);
  
break;
case 119:

        this.$ = new Arithmetic($$[$0], null, ArithmeticOption.NEGATIVE, _$[$0-1].first_line,_$[$0-1].first_column);
    
break;
case 120:

        this.$ = new Logic($$[$0], null, LogicOption.NOT, _$[$0-1].first_line,_$[$0-1].first_column);
    
break;
case 121:

        this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOption.PLUS, _$[$0-2].first_line,_$[$0-2].first_column);
       
    
break;
case 122:

        this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOption.MINUS, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 123:
 
        this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOption.TIMES, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 124:

        this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOption.DIV, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 125:

        this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOption.MOD, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 126:

        this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOption.POT, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 127:

        this.$ = new Relational($$[$0-2], $$[$0],RelationalOption.LESS, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 128:

        this.$ = new Relational($$[$0-2], $$[$0],RelationalOption.LESSOREQUAL ,_$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 129:

        this.$ = new Relational($$[$0-2], $$[$0],RelationalOption.GREATER ,_$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 130:

        this.$ = new Relational($$[$0-2], $$[$0],RelationalOption.GREATEROREQUAL ,_$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 131:

        this.$ = new Relational($$[$0-2], $$[$0],RelationalOption.EQUAL ,_$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 132:

        this.$ = new Relational($$[$0-2], $$[$0],RelationalOption.NOTEQUAL ,_$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 133:

        this.$ = new Logic($$[$0-2], $$[$0],LogicOption.AND ,_$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 134:

        this.$ = new Logic($$[$0-2], $$[$0],LogicOption.OR ,_$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 137:
 
        this.$ = $$[$0-1];
    
break;
case 138:
 
     
        this.$ = $$[$0];
    
break;
case 139:
 
        this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 0);
    
break;
case 140:
 
        this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 1);
        
    
break;
case 141:

        this.$ = new Literal($$[$0].replace(/\"/g,""), _$[$0].first_line, _$[$0].first_column, 2);
    
break;
case 142:

        this.$ = new Literal($$[$0].replace(/\'/g,""), _$[$0].first_line, _$[$0].first_column, 2);
    
break;
case 143:

        this.$ = new CadenaParam($$[$0].replace(/\`/g,""), _$[$0].first_line, _$[$0].first_column);
    
break;
case 144:

        this.$ = new Literal(true, _$[$0].first_line, _$[$0].first_column, 3);
    
break;
case 145:

        this.$ = new Literal(false, _$[$0].first_line, _$[$0].first_column, 3);
    
break;
case 146:

        this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 4);
    
break;
case 147:

        this.$ = new Access($$[$0-1],null, _$[$0-1].first_line, _$[$0-1].first_column,2);
    
break;
case 148:

        this.$ = new Access($$[$0],null, _$[$0].first_line, _$[$0].first_column,1);
    
break;
case 150:

        this.$ = new ArrayLenght($$[$0-1],_$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 151:

        this.$ =$$[$0];
    
break;
}
},
table: [{2:$V0,3:1,4:[1,2],5:3,6:4,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:$V1,20:$V2,21:18,22:19,23:20,24:21,25:22,26:$V3,27:$V4,28:$V5,29:37,31:$V6,32:$V7,37:$V8,42:$V9,46:$Va,51:$Vb,54:$Vc,55:$Vd,58:26,62:$Ve,65:$Vf,66:$Vg,67:$Vh,73:$Vi,79:42,80:$Vj,81:$Vk,95:40,96:$Vl,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr},{1:[3]},{1:[2,1]},{2:$V0,4:[1,52],6:53,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:$V1,20:$V2,21:18,22:19,23:20,24:21,25:22,26:$V3,27:$V4,28:$V5,29:37,31:$V6,32:$V7,37:$V8,42:$V9,46:$Va,51:$Vb,54:$Vc,55:$Vd,58:26,62:$Ve,65:$Vf,66:$Vg,67:$Vh,73:$Vi,79:42,80:$Vj,81:$Vk,95:40,96:$Vl,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr},o($Vs,[2,4]),{7:[1,54],8:[1,55]},o($Vs,[2,7]),o($Vs,[2,8]),o($Vs,[2,9]),o($Vs,[2,10]),o($Vs,[2,11]),o($Vs,[2,12]),o($Vs,[2,13]),o($Vs,[2,14]),o($Vs,[2,15]),o($Vs,[2,16]),{7:[1,56]},{7:[1,57]},o($Vs,[2,19]),o($Vs,[2,20]),o($Vs,[2,21]),o($Vt,$Vu,{7:[1,58]}),o($Vt,$Vv,{7:[1,59]}),{7:[1,60]},{32:[1,61]},{32:[1,62]},o($Vt,$Vw,{52:[1,63],55:$Vx,103:$Vy}),o($Vt,$Vz,{28:$VA,34:[1,69],35:[1,70],52:[1,66],55:$VB,59:[1,67],60:[1,68],103:$VC}),{28:[1,74]},{28:[1,75]},{17:76,42:$V9},{28:[1,77]},{28:[1,78]},{2:$V0,5:79,6:4,8:[1,80],9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:$V1,20:$V2,21:18,22:19,23:20,24:21,25:22,26:$V3,27:$V4,28:$V5,29:37,31:$V6,32:$V7,37:$V8,42:$V9,46:$Va,51:$Vb,54:$Vc,55:$Vd,58:26,62:$Ve,65:$Vf,66:$Vg,67:$Vh,73:$Vi,79:42,80:$Vj,81:$Vk,95:40,96:$Vl,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr},{28:[1,81]},{7:[1,82],24:86,25:84,28:$V5,29:83,32:$VD,46:$Va,55:$Vd,58:87,79:42,80:$Vj,81:$Vk,95:40,96:$Vl,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr},{32:[1,88]},{78:$VE,80:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,93:$VR,94:$VS},{24:86,25:84,28:$V5,29:104,32:$VD,46:$Va,55:$Vd,58:87,79:42,80:$Vj,81:$Vk,95:40,96:$Vl,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr},{24:86,25:84,28:$V5,29:105,32:$VD,46:$Va,55:$Vd,58:87,79:42,80:$Vj,81:$Vk,95:40,96:$Vl,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr},o($VT,[2,136]),{24:86,25:84,28:$V5,29:106,32:$VD,46:$Va,55:$Vd,58:87,79:42,80:$Vj,81:$Vk,95:40,96:$Vl,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr},o($VT,[2,138]),o($VT,[2,139]),o($VT,[2,140]),o($VT,[2,141]),o($VT,[2,142]),o($VT,[2,143]),o($VT,[2,144]),o($VT,[2,145]),o($VT,[2,146]),{24:86,25:84,28:$V5,29:109,32:$VD,33:107,46:$Va,55:$Vd,56:[1,108],58:87,79:42,80:$Vj,81:$Vk,95:40,96:$Vl,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr},{1:[2,2]},o($Vs,[2,3]),o($Vs,[2,5]),o($Vs,[2,6]),o($Vs,[2,17]),o($Vs,[2,18]),o($Vs,[2,22]),o($Vs,[2,23]),o($Vs,[2,24]),{7:[1,110],40:[1,112],52:[1,111]},{7:[1,115],40:[1,114],52:[1,113]},{24:86,25:84,28:$V5,29:116,32:$VD,46:$Va,55:$Vd,58:87,79:42,80:$Vj,81:$Vk,95:40,96:$Vl,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr},{24:86,25:84,28:$V5,29:117,32:$VD,46:$Va,55:$Vd,58:87,79:42,80:$Vj,81:$Vk,95:40,96:$Vl,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr},o($VT,[2,150]),{24:86,25:84,28:$V5,29:118,32:$VD,46:$Va,55:$Vd,58:87,79:42,80:$Vj,81:$Vk,95:40,96:$Vl,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr},{7:[1,119]},{7:[1,120]},{28:[1,121]},{28:[1,122]},{24:86,25:84,28:$V5,29:109,30:[1,123],32:$VD,33:124,46:$Va,55:$Vd,58:87,79:42,80:$Vj,81:$Vk,95:40,96:$Vl,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr},{24:86,25:84,28:$V5,29:125,32:$VD,46:$Va,55:$Vd,58:87,79:42,80:$Vj,81:$Vk,95:40,96:$Vl,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr},o($VT,[2,147]),{24:86,25:84,28:$V5,29:126,32:$VD,46:$Va,55:$Vd,58:87,79:42,80:$Vj,81:$Vk,95:40,96:$Vl,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr},{24:86,25:84,28:$V5,29:127,32:$VD,46:$Va,55:$Vd,58:87,79:42,80:$Vj,81:$Vk,95:40,96:$Vl,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr},{65:[1,128]},{32:[1,131],51:[1,132],54:[1,133],74:129,75:130},{24:86,25:84,28:$V5,29:134,32:$VD,46:$Va,55:$Vd,58:87,79:42,80:$Vj,81:$Vk,95:40,96:$Vl,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr},{2:$V0,6:53,8:[1,135],9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:$V1,20:$V2,21:18,22:19,23:20,24:21,25:22,26:$V3,27:$V4,28:$V5,29:37,31:$V6,32:$V7,37:$V8,42:$V9,46:$Va,51:$Vb,54:$Vc,55:$Vd,58:26,62:$Ve,65:$Vf,66:$Vg,67:$Vh,73:$Vi,79:42,80:$Vj,81:$Vk,95:40,96:$Vl,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr},o($VU,[2,112]),{24:86,25:84,28:$V5,29:136,32:$VD,46:$Va,55:$Vd,58:87,79:42,80:$Vj,81:$Vk,95:40,96:$Vl,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr},o($Vs,[2,26]),{7:[1,137],78:$VE,80:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,93:$VR,94:$VS},o($VT,$Vv),o($VT,$Vz,{28:$VA,55:$VB,103:$VC}),o($VT,$Vu),o($VT,$Vw,{55:$Vx,103:$Vy}),{28:[1,138]},{24:86,25:84,28:$V5,29:139,32:$VD,46:$Va,55:$Vd,58:87,79:42,80:$Vj,81:$Vk,95:40,96:$Vl,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr},{24:86,25:84,28:$V5,29:140,32:$VD,46:$Va,55:$Vd,58:87,79:42,80:$Vj,81:$Vk,95:40,96:$Vl,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr},{24:86,25:84,28:$V5,29:141,32:$VD,46:$Va,55:$Vd,58:87,79:42,80:$Vj,81:$Vk,95:40,96:$Vl,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr},{24:86,25:84,28:$V5,29:142,32:$VD,46:$Va,55:$Vd,58:87,79:42,80:$Vj,81:$Vk,95:40,96:$Vl,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr},{24:86,25:84,28:$V5,29:143,32:$VD,46:$Va,55:$Vd,58:87,79:42,80:$Vj,81:$Vk,95:40,96:$Vl,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr},{24:86,25:84,28:$V5,29:144,32:$VD,46:$Va,55:$Vd,58:87,79:42,80:$Vj,81:$Vk,95:40,96:$Vl,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr},{24:86,25:84,28:$V5,29:145,32:$VD,46:$Va,55:$Vd,58:87,79:42,80:$Vj,81:$Vk,95:40,96:$Vl,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr},{24:86,25:84,28:$V5,29:146,32:$VD,46:$Va,55:$Vd,58:87,79:42,80:$Vj,81:$Vk,95:40,96:$Vl,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr},{24:86,25:84,28:$V5,29:147,32:$VD,46:$Va,55:$Vd,58:87,79:42,80:$Vj,81:$Vk,95:40,96:$Vl,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr},{24:86,25:84,28:$V5,29:148,32:$VD,46:$Va,55:$Vd,58:87,79:42,80:$Vj,81:$Vk,95:40,96:$Vl,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr},{24:86,25:84,28:$V5,29:149,32:$VD,46:$Va,55:$Vd,58:87,79:42,80:$Vj,81:$Vk,95:40,96:$Vl,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr},{24:86,25:84,28:$V5,29:150,32:$VD,46:$Va,55:$Vd,58:87,79:42,80:$Vj,81:$Vk,95:40,96:$Vl,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr},{24:86,25:84,28:$V5,29:151,32:$VD,46:$Va,55:$Vd,58:87,79:42,80:$Vj,81:$Vk,95:40,96:$Vl,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr},{24:86,25:84,28:$V5,29:152,32:$VD,46:$Va,55:$Vd,58:87,79:42,80:$Vj,81:$Vk,95:40,96:$Vl,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr},{24:86,25:84,28:$V5,29:153,32:$VD,46:$Va,55:$Vd,58:87,79:42,80:$Vj,81:$Vk,95:40,96:$Vl,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr},o($VT,[2,119]),o($VT,[2,120]),{30:[1,154],78:$VE,80:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,93:$VR,94:$VS},{36:$VV,56:[1,155]},o($VT,[2,116]),o($VW,[2,33],{78:$VE,80:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,93:$VR,94:$VS}),o($Vs,[2,52]),{24:86,25:84,28:$V5,29:157,32:$VD,46:$Va,55:$Vd,58:87,79:42,80:$Vj,81:$Vk,95:40,96:$Vl,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr},{43:$VX,44:$VY,45:$VZ,46:$V_,47:$V$,48:$V01,49:$V11,53:158},{24:86,25:84,28:$V5,29:166,32:$VD,46:$Va,55:$Vd,58:87,79:42,80:$Vj,81:$Vk,95:40,96:$Vl,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr},{43:$VX,44:$VY,45:$VZ,46:$V_,47:$V$,48:$V01,49:$V11,53:167},o($Vs,[2,59]),{7:[1,168],78:$VE,80:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,93:$VR,94:$VS},{56:[1,169],78:$VE,80:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,93:$VR,94:$VS},{7:[1,170],78:$VE,80:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,93:$VR,94:$VS},o($Vs,[2,70]),o($Vs,[2,71]),{24:86,25:84,28:$V5,29:171,32:$VD,46:$Va,55:$Vd,58:87,79:42,80:$Vj,81:$Vk,95:40,96:$Vl,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr},{30:[1,172]},o($VT,[2,28]),{30:[1,173],36:$VV},{56:[1,174],78:$VE,80:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,93:$VR,94:$VS},{30:[1,175],78:$VE,80:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,93:$VR,94:$VS},{30:[1,176],78:$VE,80:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,93:$VR,94:$VS},{28:[1,177]},{7:[1,178]},{7:[1,179],76:[1,180],77:[1,181]},{52:$V21,59:$V31,60:$V41,76:[1,182],77:[1,183]},{32:[1,187]},{32:[1,188]},{30:[1,189],78:$VE,80:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,93:$VR,94:$VS},o($VU,[2,111]),{30:[1,190],78:$VE,80:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,93:$VR,94:$VS},o($Vs,[2,27]),{30:[1,191],32:[1,193],39:192},{40:[1,194],78:$VE,80:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,93:$VR,94:$VS},o($V51,[2,121],{83:$VH,84:$VI,85:$VJ,86:$VK}),o($V51,[2,122],{83:$VH,84:$VI,85:$VJ,86:$VK}),o($V61,[2,123],{85:$VJ,86:$VK}),o($V61,[2,124],{85:$VJ,86:$VK}),o($VT,[2,125]),o($VT,[2,126]),o($V71,[2,127],{80:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK}),o($V71,[2,128],{80:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK}),o($V71,[2,129],{80:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK}),o($V71,[2,130],{80:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK}),o($V81,[2,131],{80:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN,90:$VO}),o($V81,[2,132],{80:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN,90:$VO}),o([7,30,36,40,56,76,77,78,93,94],[2,133],{80:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN,90:$VO,91:$VP,92:$VQ}),o([7,30,36,40,56,76,77,78,94],[2,134],{80:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,93:$VR}),o($VT,[2,137]),o($VT,[2,115]),{24:86,25:84,28:$V5,29:195,32:$VD,46:$Va,55:$Vd,58:87,79:42,80:$Vj,81:$Vk,95:40,96:$Vl,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr},{7:[1,196],78:$VE,80:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,93:$VR,94:$VS},{7:[1,198],50:199,52:[1,197],55:$V91},o($Va1,[2,74]),o($Va1,[2,75]),o($Va1,[2,76]),o($Va1,[2,77]),o($Va1,[2,78]),o($Va1,[2,79]),o($Va1,[2,80]),{7:[1,201],78:$VE,80:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,93:$VR,94:$VS},{7:[1,203],50:204,52:[1,202],55:$V91},o($Vs,[2,68]),o($Vb1,[2,117]),o($Vs,[2,69]),{30:[1,205],78:$VE,80:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,93:$VR,94:$VS},{7:[1,206]},o($VT,[2,29]),o($Vb1,[2,118]),{17:207,42:$V9},{17:208,42:$V9},{24:86,25:84,28:$V5,29:209,32:$VD,46:$Va,55:$Vd,58:87,79:42,80:$Vj,81:$Vk,95:40,96:$Vl,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr},{24:86,25:84,28:$V5,29:210,32:$VD,46:$Va,55:$Vd,58:87,79:42,80:$Vj,81:$Vk,95:40,96:$Vl,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr},{24:86,25:84,28:$V5,29:211,32:$VD,46:$Va,55:$Vd,58:87,79:42,80:$Vj,81:$Vk,95:40,96:$Vl,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr},{32:[1,212]},{32:[1,213]},{32:[1,214]},{32:[1,215]},{24:86,25:84,28:$V5,29:216,32:$VD,46:$Va,55:$Vd,58:87,79:42,80:$Vj,81:$Vk,95:40,96:$Vl,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr},o($Vc1,[2,109]),o($Vc1,[2,110]),o($Vd1,[2,100],{40:[1,218],52:[1,217]}),o($Vd1,[2,107],{40:[1,220],52:[1,219]}),{42:[1,221]},{7:[1,222]},{38:223,40:[1,224],42:$Ve1},{30:[1,226],36:[1,227]},{40:[1,228]},{24:86,25:84,28:$V5,29:229,32:$VD,46:$Va,55:$Vd,58:87,79:42,80:$Vj,81:$Vk,95:40,96:$Vl,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr},o($VW,[2,32],{78:$VE,80:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,93:$VR,94:$VS}),o($Vs,[2,53]),{24:86,25:84,28:$V5,29:230,32:$VD,46:$Va,55:$Vd,58:87,79:42,80:$Vj,81:$Vk,95:40,96:$Vl,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr},o($Vs,[2,55]),{7:[1,231],52:[1,232],55:$Vf1},{56:[1,234]},o($Vs,[2,56]),{24:86,25:84,28:$V5,29:235,32:$VD,46:$Va,55:$Vd,58:87,79:42,80:$Vj,81:$Vk,95:40,96:$Vl,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr},o($Vs,[2,58]),{7:[1,236],52:[1,237],55:$Vf1},{7:[1,238]},o($Vs,[2,31]),o($Vs,[2,84],{63:239,64:[1,240]}),o($Vs,[2,85]),{30:[1,241],78:$VE,80:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,93:$VR,94:$VS},{7:[1,242],78:$VE,80:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,93:$VR,94:$VS},{7:[1,243],78:$VE,80:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,93:$VR,94:$VS},{30:[1,244]},{30:[1,245]},{30:[1,246]},{30:[1,247]},o($Vc1,[2,108],{78:$VE,80:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,93:$VR,94:$VS}),{24:86,25:84,28:$V5,29:248,32:$VD,46:$Va,55:$Vd,58:87,79:42,80:$Vj,81:$Vk,95:40,96:$Vl,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr},{43:$VX,44:$VY,45:$VZ,46:$V_,47:$V$,48:$V01,49:$V11,53:249},{24:86,25:84,28:$V5,29:250,32:$VD,46:$Va,55:$Vd,58:87,79:42,80:$Vj,81:$Vk,95:40,96:$Vl,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr},{43:$VX,44:$VY,45:$VZ,46:$V_,47:$V$,48:$V01,49:$V11,53:251},{68:252,69:253,70:$Vg1,72:$Vh1},o($Vs,[2,25]),o($Vs,[2,34]),{41:256,43:$Vi1,44:$Vj1,45:$Vk1,46:$Vl1,47:$Vm1,48:$Vn1,49:$Vo1},{2:$V0,5:264,6:4,8:[1,265],9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:$V1,20:$V2,21:18,22:19,23:20,24:21,25:22,26:$V3,27:$V4,28:$V5,29:37,31:$V6,32:$V7,37:$V8,42:$V9,46:$Va,51:$Vb,54:$Vc,55:$Vd,58:26,62:$Ve,65:$Vf,66:$Vg,67:$Vh,73:$Vi,79:42,80:$Vj,81:$Vk,95:40,96:$Vl,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr},{38:266,40:[1,267],42:$Ve1},{32:[1,268]},{41:269,43:$Vi1,44:$Vj1,45:$Vk1,46:$Vl1,47:$Vm1,48:$Vn1,49:$Vo1},o([7,30,36,40,56,76,77,78],[2,113],{80:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,93:$VR,94:$VS}),{7:[1,270],78:$VE,80:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,93:$VR,94:$VS},o($Vs,[2,60]),{24:86,25:84,28:$V5,29:271,32:$VD,46:$Va,55:$Vd,58:87,79:42,80:$Vj,81:$Vk,95:40,96:$Vl,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr},{56:[1,272]},o($Vp1,[2,65]),{7:[1,273],78:$VE,80:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,93:$VR,94:$VS},o($Vs,[2,62]),{24:86,25:84,28:$V5,29:274,32:$VD,46:$Va,55:$Vd,58:87,79:42,80:$Vj,81:$Vk,95:40,96:$Vl,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr},o($Vs,[2,30]),o($Vs,[2,81]),{12:276,17:275,42:$V9,62:$Ve},{7:[1,277]},{32:$Vq1,74:278},{32:$Vq1,74:280},{17:281,42:$V9},{17:282,42:$V9},{17:283,42:$V9},{17:284,42:$V9},o($Vd1,[2,101],{78:$VE,80:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,93:$VR,94:$VS}),o($Vd1,[2,103],{52:[1,285]}),o($Vd1,[2,104],{78:$VE,80:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,93:$VR,94:$VS}),o($Vd1,[2,106],{52:[1,286]}),{8:[1,287],69:288,70:$Vg1,72:$Vh1},o($Vr1,[2,89]),{24:86,25:84,28:$V5,29:289,32:$VD,46:$Va,55:$Vd,58:87,79:42,80:$Vj,81:$Vk,95:40,96:$Vl,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr},{40:[1,290]},{38:291,42:$Ve1},o($Vs1,[2,42],{50:292,55:$V91}),o($Vs1,[2,43],{50:293,55:$V91}),o($Vs1,[2,44],{50:294,55:$V91}),o($Vs1,[2,45]),o($Vs1,[2,46]),o($Vs1,[2,47]),o($Vs1,[2,48]),{2:$V0,6:53,8:[1,295],9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:$V1,20:$V2,21:18,22:19,23:20,24:21,25:22,26:$V3,27:$V4,28:$V5,29:37,31:$V6,32:$V7,37:$V8,42:$V9,46:$Va,51:$Vb,54:$Vc,55:$Vd,58:26,62:$Ve,65:$Vf,66:$Vg,67:$Vh,73:$Vi,79:42,80:$Vj,81:$Vk,95:40,96:$Vl,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr},o($Vs,[2,39]),o($Vs,[2,35]),{41:296,43:$Vi1,44:$Vj1,45:$Vk1,46:$Vl1,47:$Vm1,48:$Vn1,49:$Vo1},{40:[1,297]},o($Vt1,[2,41]),o($Vs,[2,54]),{7:[1,298],78:$VE,80:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,93:$VR,94:$VS},o($Vp1,[2,64]),o($Vs,[2,57]),{7:[1,299],78:$VE,80:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,93:$VR,94:$VS},o($Vs,[2,82]),o($Vs,[2,83]),o($Vs,[2,86]),{30:[1,300]},{52:$V21,59:$V31,60:$V41},{30:[1,301]},o($Vs,[2,96]),o($Vs,[2,98]),o($Vs,[2,97]),o($Vs,[2,99]),{24:86,25:84,28:$V5,29:302,32:$VD,46:$Va,55:$Vd,58:87,79:42,80:$Vj,81:$Vk,95:40,96:$Vl,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr},{24:86,25:84,28:$V5,29:303,32:$VD,46:$Va,55:$Vd,58:87,79:42,80:$Vj,81:$Vk,95:40,96:$Vl,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr},o($Vs,[2,87]),o($Vr1,[2,88]),{40:[1,304],78:$VE,80:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,93:$VR,94:$VS},o($Vr1,[2,93],{6:4,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,21:18,22:19,23:20,24:21,25:22,58:26,29:37,95:40,79:42,71:305,5:306,2:$V0,19:$V1,20:$V2,26:$V3,27:$V4,28:$V5,31:$V6,32:$V7,37:$V8,42:$V9,46:$Va,51:$Vb,54:$Vc,55:$Vd,62:$Ve,65:$Vf,66:$Vg,67:$Vh,73:$Vi,80:$Vj,81:$Vk,96:$Vl,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr}),o($Vs,[2,36]),o($Vs1,[2,49],{55:$Vf1}),o($Vs1,[2,50],{55:$Vf1}),o($Vs1,[2,51],{55:$Vf1}),o($Vs,[2,38]),{38:307,42:$Ve1},{41:308,43:$Vi1,44:$Vj1,45:$Vk1,46:$Vl1,47:$Vm1,48:$Vn1,49:$Vo1},o($Vs,[2,61]),o($Vs,[2,63]),{17:309,42:$V9},{17:310,42:$V9},o($Vd1,[2,102],{78:$VE,80:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,93:$VR,94:$VS}),o($Vd1,[2,105],{78:$VE,80:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,93:$VR,94:$VS}),o($Vr1,[2,91],{6:4,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,21:18,22:19,23:20,24:21,25:22,58:26,29:37,95:40,79:42,5:306,71:311,2:$V0,19:$V1,20:$V2,26:$V3,27:$V4,28:$V5,31:$V6,32:$V7,37:$V8,42:$V9,46:$Va,51:$Vb,54:$Vc,55:$Vd,62:$Ve,65:$Vf,66:$Vg,67:$Vh,73:$Vi,80:$Vj,81:$Vk,96:$Vl,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr}),o($Vr1,[2,92]),o($Vr1,[2,114],{9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,21:18,22:19,23:20,24:21,25:22,58:26,29:37,95:40,79:42,6:53,2:$V0,19:$V1,20:$V2,26:$V3,27:$V4,28:$V5,31:$V6,32:$V7,37:$V8,42:$V9,46:$Va,51:$Vb,54:$Vc,55:$Vd,62:$Ve,65:$Vf,66:$Vg,67:$Vh,73:$Vi,80:$Vj,81:$Vk,96:$Vl,97:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr}),o($Vs,[2,37]),o($Vt1,[2,40]),o($Vs,[2,94]),o($Vs,[2,95]),o($Vr1,[2,90])],
defaultActions: {2:[2,1],52:[2,2]},
parseError: function parseError (str, hash) {
this.hash= hash;
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

  const {Arithmetic, ArithmeticOption} = require('../Interprete/Expression/Arithmetic');
  const {Relational, RelationalOption} = require('../Interprete/Expression/Relational');
  const {Access} = require('../Interprete/Expression/Access');
  const {Literal} = require('../Interprete/Expression/Literal');
  const {AccesoArray} = require('../Interprete/Expression/AccesoArray');
  const {Declaration} = require('../Interprete/Instruction/Declaration');
  const {DeclarationArray} = require('../Interprete/Instruction/DeclarationArray');
  const {DeclarationArray2} = require('../Interprete/Instruction/DeclarationArray2');
  const {DecArray} = require('../Interprete/Instruction/DecArray');
  const {Logic,LogicOption} = require('../Interprete/Expression/Logic');
  const {Function} = require('../Interprete/Instruction/Function');
  const {Asignation} = require('../Interprete/Instruction/Asignation');
  const {AsignationArray} = require('../Interprete/Instruction/AsignationArray');
  const {AsignationArray2} = require('../Interprete/Instruction/AsignationArray2');
  const {If} = require('../Interprete/Instruction/If');
  const {While} = require('../Interprete/Instruction/While');
  const {doWhile} = require('../Interprete/Instruction/doWhile');
  const {Statement} = require('../Interprete/Instruction/Statement');
  const {Switch} = require('../Interprete/Instruction/Switch');
  const {Case} = require('../Interprete/Instruction/Case');
  const {For} = require('../Interprete/Instruction/For');
  const {For2} = require('../Interprete/Instruction/For2');
  const {FunctionArray} = require('../Interprete/Instruction/FunctionArray');
  const {Condition} = require('../Interprete/Expression/Condition');
  const {Print} = require('../Interprete/Instruction/Print');
  const {Continue} = require('../Interprete/Instruction/Continue');
  const {Break} = require('../Interprete/Instruction/Break');
  const {Call} = require('../Interprete/Instruction/Call');
  const {Return} = require('../Interprete/Instruction/Return');
  const {Prueba} = require('../Interprete/Instruction/Prueba');
  const {CadenaParam} = require('../Interprete/Instruction/CadenaParam');
  const {pruebaAsign} = require('../Interprete/Instruction/pruebaAsign');
  const {ArrayLenght} = require('../Interprete/Expression/ArrayLenght');
  const {registrarError} = require('../Interprete/Instruction/registrarError');
  const {Graficar} = require('../Interprete/Instruction/graficar');
	 
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// se ignoran espacios en blanco
break;
case 1:// comentario simple línea
break;
case 2:// comentario multilinea 
break;
case 3:return 96
break;
case 4:return 97
break;
case 5:return 98
break;
case 6:return 99
break;
case 7:return 100
break;
case 8:return 44
break;
case 9:return 45
break;
case 10:return 43
break;
case 11:return 'TYPE'
break;
case 12:return 47
break;
case 13:return 51
break;
case 14:return 54
break;
case 15:return 101
break;
case 16:return 102
break;
case 17:return 62
break;
case 18:return 64
break;
case 19:return 67
break;
case 20:return 70
break;
case 21:return 72
break;
case 22:return 66
break;
case 23:return 65
break;
case 24:return 73
break;
case 25:return 19
break;
case 26:return 20
break;
case 27:return 31
break;
case 28:return 27
break;
case 29:return 26
break;
case 30:return 37
break;
case 31:return 48
break;
case 32:return 34
break;
case 33:return 35
break;
case 34:return 103
break;
case 35:return 46
break;
case 36:return 49
break;
case 37:return 76
break;
case 38:return 77
break;
case 39:return 59
break;
case 40:return 82
break;
case 41:return 60
break;
case 42:return 80
break;
case 43:return 84
break;
case 44:return 86
break;
case 45:return 83
break;
case 46:return 85
break;
case 47:return 78
break;
case 48:return 91
break;
case 49:return 90
break;
case 50:return 88
break;
case 51:return 92
break;
case 52:return 87
break;
case 53:return 89
break;
case 54:return 93
break;
case 55:return 94
break;
case 56:return 81
break;
case 57:return 28
break;
case 58:return 30
break;
case 59:return 42
break;
case 60:return 8
break;
case 61:return 55
break;
case 62:return 56
break;
case 63:return 7 
break;
case 64:return 40
break;
case 65:return 52
break;
case 66:return 36
break;
case 67:return 32;
break;
case 68:return 4
break;
case 69: 
                       console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);
                       let e = new registrarError(yy_.yylloc.first_line, yy_.yylloc.first_column,yy_.yytext,null,1);
                       e.execute();
                    
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:(([0-9]+)\.([0-9]+)))/,/^(?:([0-9]+))/,/^(?:(("[^"]*")))/,/^(?:(('[^']*')))/,/^(?:((`[^`]*`)))/,/^(?:string\b)/,/^(?:boolean\b)/,/^(?:number\b)/,/^(?:type\b)/,/^(?:Array\b)/,/^(?:let\b)/,/^(?:const\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:do\b)/,/^(?:while\b)/,/^(?:for\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:console\.log\b)/,/^(?:graficar_ts\b)/,/^(?:function\b)/,/^(?:void\b)/,/^(?:\.push\b)/,/^(?:\.pop\b)/,/^(?:\.length\b)/,/^(?:null\b)/,/^(?:any\b)/,/^(?:in\b)/,/^(?:of\b)/,/^(?:\+\+)/,/^(?:\+)/,/^(?:--)/,/^(?:-)/,/^(?:\/)/,/^(?:\*\*)/,/^(?:\*)/,/^(?:%)/,/^(?:\?)/,/^(?:==)/,/^(?:>=)/,/^(?:<=)/,/^(?:!=)/,/^(?:<)/,/^(?:>)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:;)/,/^(?::)/,/^(?:=)/,/^(?:,)/,/^(?:([a-zA-Z_])[a-zA-Z0-9_ñÑ]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Grammar;
exports.Parser = Grammar.Parser;
exports.parse = function () { return Grammar.parse.apply(Grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}